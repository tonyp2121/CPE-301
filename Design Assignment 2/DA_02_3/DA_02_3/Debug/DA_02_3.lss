
DA_02_3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000110  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000164  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000194  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006b8  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000604  00000000  00000000  000008ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000028c  00000000  00000000  00000eb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  0000113c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000373  00000000  00000000  00001160  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000e4  00000000  00000000  000014d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000015b7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 86 00 	jmp	0x10c	; 0x10c <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <avr/io.h>
int main(void)
{
	unsigned int count = 0, otherCounter = 0, fiveCount= 0, tenCount = 0;	// set up our counters

	DDRB = 0xFF;		// set DDRB to ouput all
  80:	8f ef       	ldi	r24, 0xFF	; 255
  82:	84 b9       	out	0x04, r24	; 4
	PORTB = 0;			// make sure there are no outputs
  84:	15 b8       	out	0x05, r1	; 5
	DDRC = 0x31;		// set DDRC to ouput only 0, 4, and 5
  86:	81 e3       	ldi	r24, 0x31	; 49
  88:	87 b9       	out	0x07, r24	; 7
	PORTC = 0;			// make sure there are no outputs
  8a:	18 b8       	out	0x08, r1	; 8
*/

#include <avr/io.h>
int main(void)
{
	unsigned int count = 0, otherCounter = 0, fiveCount= 0, tenCount = 0;	// set up our counters
  8c:	60 e0       	ldi	r22, 0x00	; 0
  8e:	70 e0       	ldi	r23, 0x00	; 0
  90:	40 e0       	ldi	r20, 0x00	; 0
  92:	50 e0       	ldi	r21, 0x00	; 0
  94:	e0 e0       	ldi	r30, 0x00	; 0
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	20 e0       	ldi	r18, 0x00	; 0
  9a:	30 e0       	ldi	r19, 0x00	; 0
		while( (TIFR0 & 0x1) == 0 );	// wait until overflow flag is set
		TCCR0B = 0;		// stop/disable Timer 0
		TIFR0 |= 0x01;		// clear overflow flag
		if (count == 30)
		{
			PORTC ^= 0x01;		//toggle PORTC.0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
					PORTC ^= 0x20;		// toggle PortC.5
				}
				if(tenCount == 10)
				{
					tenCount = 0;		// reset counter
					PORTC ^= 0x10;		// toggle PortC.4
  9e:	d0 e1       	ldi	r29, 0x10	; 16
					fiveCount = 0;		// reset counter
					PORTC ^= 0x20;		// toggle PortC.5
				}
				if(tenCount == 10)
				{
					tenCount = 0;		// reset counter
  a0:	a0 e0       	ldi	r26, 0x00	; 0
  a2:	90 e0       	ldi	r25, 0x00	; 0
				fiveCount++;			// increment 5 counter
				tenCount++;				// increment 10 counter
				if(fiveCount == 5)
				{
					fiveCount = 0;		// reset counter
					PORTC ^= 0x20;		// toggle PortC.5
  a4:	c0 e2       	ldi	r28, 0x20	; 32
  a6:	05 c0       	rjmp	.+10     	; 0xb2 <main+0x32>
		TCCR0B = 0;		// stop/disable Timer 0
		TIFR0 |= 0x01;		// clear overflow flag
		if (count == 30)
		{
			PORTC ^= 0x01;		//toggle PORTC.0
			count = 0;			// reset counter
  a8:	2a 2f       	mov	r18, r26
  aa:	39 2f       	mov	r19, r25
  ac:	02 c0       	rjmp	.+4      	; 0xb2 <main+0x32>
  ae:	2a 2f       	mov	r18, r26
  b0:	39 2f       	mov	r19, r25
	PORTB = 0;			// make sure there are no outputs
	DDRC = 0x31;		// set DDRC to ouput only 0, 4, and 5
	PORTC = 0;			// make sure there are no outputs
	while(1)
	{
		TCCR0A = 0;		// set up Timer0 with prescaler = 256 and normal mode
  b2:	14 bc       	out	0x24, r1	; 36
		TCCR0B |= (1 << CS02);
  b4:	85 b5       	in	r24, 0x25	; 37
  b6:	84 60       	ori	r24, 0x04	; 4
  b8:	85 bd       	out	0x25, r24	; 37

		TCNT0 = 0;		// initialize counter
  ba:	16 bc       	out	0x26, r1	; 38
		while( (TIFR0 & 0x1) == 0 );	// wait until overflow flag is set
  bc:	a8 9b       	sbis	0x15, 0	; 21
  be:	fe cf       	rjmp	.-4      	; 0xbc <main+0x3c>
		TCCR0B = 0;		// stop/disable Timer 0
  c0:	15 bc       	out	0x25, r1	; 37
		TIFR0 |= 0x01;		// clear overflow flag
  c2:	a8 9a       	sbi	0x15, 0	; 21
		if (count == 30)
  c4:	2e 31       	cpi	r18, 0x1E	; 30
  c6:	31 05       	cpc	r19, r1
  c8:	f1 f4       	brne	.+60     	; 0x106 <main+0x86>
		{
			PORTC ^= 0x01;		//toggle PORTC.0
  ca:	88 b1       	in	r24, 0x08	; 8
  cc:	8b 27       	eor	r24, r27
  ce:	88 b9       	out	0x08, r24	; 8
			count = 0;			// reset counter
			if ((PORTC & 0x01) == 1)	//if PORTC.0 == 1 do the enxt codes
  d0:	40 9b       	sbis	0x08, 0	; 8
  d2:	ea cf       	rjmp	.-44     	; 0xa8 <main+0x28>
			{
				otherCounter++;			// increment other counter
  d4:	31 96       	adiw	r30, 0x01	; 1
				PORTB = otherCounter;	// output counter to PortB
  d6:	e5 b9       	out	0x05, r30	; 5
				fiveCount++;			// increment 5 counter
  d8:	4f 5f       	subi	r20, 0xFF	; 255
  da:	5f 4f       	sbci	r21, 0xFF	; 255
				tenCount++;				// increment 10 counter
  dc:	6f 5f       	subi	r22, 0xFF	; 255
  de:	7f 4f       	sbci	r23, 0xFF	; 255
				if(fiveCount == 5)
  e0:	45 30       	cpi	r20, 0x05	; 5
  e2:	51 05       	cpc	r21, r1
  e4:	29 f4       	brne	.+10     	; 0xf0 <main+0x70>
				{
					fiveCount = 0;		// reset counter
					PORTC ^= 0x20;		// toggle PortC.5
  e6:	88 b1       	in	r24, 0x08	; 8
  e8:	8c 27       	eor	r24, r28
  ea:	88 b9       	out	0x08, r24	; 8
				PORTB = otherCounter;	// output counter to PortB
				fiveCount++;			// increment 5 counter
				tenCount++;				// increment 10 counter
				if(fiveCount == 5)
				{
					fiveCount = 0;		// reset counter
  ec:	4a 2f       	mov	r20, r26
  ee:	59 2f       	mov	r21, r25
					PORTC ^= 0x20;		// toggle PortC.5
				}
				if(tenCount == 10)
  f0:	6a 30       	cpi	r22, 0x0A	; 10
  f2:	71 05       	cpc	r23, r1
  f4:	e1 f6       	brne	.-72     	; 0xae <main+0x2e>
				{
					tenCount = 0;		// reset counter
					PORTC ^= 0x10;		// toggle PortC.4
  f6:	88 b1       	in	r24, 0x08	; 8
  f8:	8d 27       	eor	r24, r29
  fa:	88 b9       	out	0x08, r24	; 8
					fiveCount = 0;		// reset counter
					PORTC ^= 0x20;		// toggle PortC.5
				}
				if(tenCount == 10)
				{
					tenCount = 0;		// reset counter
  fc:	6a 2f       	mov	r22, r26
  fe:	79 2f       	mov	r23, r25
		TCCR0B = 0;		// stop/disable Timer 0
		TIFR0 |= 0x01;		// clear overflow flag
		if (count == 30)
		{
			PORTC ^= 0x01;		//toggle PORTC.0
			count = 0;			// reset counter
 100:	2a 2f       	mov	r18, r26
 102:	39 2f       	mov	r19, r25
 104:	d6 cf       	rjmp	.-84     	; 0xb2 <main+0x32>
					PORTC ^= 0x10;		// toggle PortC.4
				}
			}
		}
		else{
		count++;	// increment count
 106:	2f 5f       	subi	r18, 0xFF	; 255
 108:	3f 4f       	sbci	r19, 0xFF	; 255
 10a:	d3 cf       	rjmp	.-90     	; 0xb2 <main+0x32>

0000010c <_exit>:
 10c:	f8 94       	cli

0000010e <__stop_program>:
 10e:	ff cf       	rjmp	.-2      	; 0x10e <__stop_program>
