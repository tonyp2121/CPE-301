
DA_02_4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000182  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800100  00800100  000001f6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001f6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000228  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000268  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006de  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000625  00000000  00000000  0000096e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000027e  00000000  00000000  00000f93  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000048  00000000  00000000  00001214  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000370  00000000  00000000  0000125c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000049  00000000  00000000  000015cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001615  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_16>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a8 30       	cpi	r26, 0x08	; 8
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 ad 00 	call	0x15a	; 0x15a <main>
  88:	0c 94 bf 00 	jmp	0x17e	; 0x17e <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_16>:
#include <avr/io.h>
#include <avr/interrupt.h>

volatile int count = 0, otherCounter = 0, fiveCount= 0, tenCount = 0;

ISR (TIMER0_OVF_vect) {
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	8f 93       	push	r24
  9c:	9f 93       	push	r25
	if (count == 30)
  9e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <count>
  a2:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <count+0x1>
  a6:	4e 97       	sbiw	r24, 0x1e	; 30
  a8:	09 f0       	breq	.+2      	; 0xac <__vector_16+0x1c>
  aa:	47 c0       	rjmp	.+142    	; 0x13a <__vector_16+0xaa>
	{
		PORTC ^= 0x01;
  ac:	98 b1       	in	r25, 0x08	; 8
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	89 27       	eor	r24, r25
  b2:	88 b9       	out	0x08, r24	; 8
		count = 0;
  b4:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <count+0x1>
  b8:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <count>
		if ((PORTC & 0x01) == 0)
  bc:	40 99       	sbic	0x08, 0	; 8
  be:	46 c0       	rjmp	.+140    	; 0x14c <__vector_16+0xbc>
		{
			otherCounter++;
  c0:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <otherCounter>
  c4:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <otherCounter+0x1>
  c8:	01 96       	adiw	r24, 0x01	; 1
  ca:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <otherCounter+0x1>
  ce:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <otherCounter>
			PORTB = otherCounter;
  d2:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <otherCounter>
  d6:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <otherCounter+0x1>
  da:	85 b9       	out	0x05, r24	; 5
			fiveCount++;
  dc:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <fiveCount>
  e0:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <fiveCount+0x1>
  e4:	01 96       	adiw	r24, 0x01	; 1
  e6:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <fiveCount+0x1>
  ea:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <fiveCount>
			tenCount++;
  ee:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  f2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  f6:	01 96       	adiw	r24, 0x01	; 1
  f8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  fc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			if(fiveCount == 5)
 100:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <fiveCount>
 104:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <fiveCount+0x1>
 108:	05 97       	sbiw	r24, 0x05	; 5
 10a:	41 f4       	brne	.+16     	; 0x11c <__vector_16+0x8c>
			{
				fiveCount = 0;
 10c:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <fiveCount+0x1>
 110:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <fiveCount>
				PORTC ^= 0x20;
 114:	98 b1       	in	r25, 0x08	; 8
 116:	80 e2       	ldi	r24, 0x20	; 32
 118:	89 27       	eor	r24, r25
 11a:	88 b9       	out	0x08, r24	; 8
			}
			if(tenCount == 10)
 11c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 120:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 124:	0a 97       	sbiw	r24, 0x0a	; 10
 126:	91 f4       	brne	.+36     	; 0x14c <__vector_16+0xbc>
			{
				tenCount = 0;
 128:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 12c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
				PORTC ^= 0x20;
 130:	98 b1       	in	r25, 0x08	; 8
 132:	80 e2       	ldi	r24, 0x20	; 32
 134:	89 27       	eor	r24, r25
 136:	88 b9       	out	0x08, r24	; 8
 138:	09 c0       	rjmp	.+18     	; 0x14c <__vector_16+0xbc>
			}
		}
	}
	else{
		count++;
 13a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <count>
 13e:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <count+0x1>
 142:	01 96       	adiw	r24, 0x01	; 1
 144:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <count+0x1>
 148:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <count>
	}
}
 14c:	9f 91       	pop	r25
 14e:	8f 91       	pop	r24
 150:	0f 90       	pop	r0
 152:	0f be       	out	0x3f, r0	; 63
 154:	0f 90       	pop	r0
 156:	1f 90       	pop	r1
 158:	18 95       	reti

0000015a <main>:


int main(void)
{
	DDRB = 0xFF;
 15a:	8f ef       	ldi	r24, 0xFF	; 255
 15c:	84 b9       	out	0x04, r24	; 4
	PORTB = 0;
 15e:	15 b8       	out	0x05, r1	; 5
	DDRC = 0x61;
 160:	81 e6       	ldi	r24, 0x61	; 97
 162:	87 b9       	out	0x07, r24	; 7
	PORTC = 0;
 164:	18 b8       	out	0x08, r1	; 8
	TCCR0A = 0;
 166:	14 bc       	out	0x24, r1	; 36
	TCCR0B |= (1 << CS02);
 168:	85 b5       	in	r24, 0x25	; 37
 16a:	84 60       	ori	r24, 0x04	; 4
 16c:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 0;
 16e:	16 bc       	out	0x26, r1	; 38
	TIMSK0 |= (1 << TOIE0);
 170:	ee e6       	ldi	r30, 0x6E	; 110
 172:	f0 e0       	ldi	r31, 0x00	; 0
 174:	80 81       	ld	r24, Z
 176:	81 60       	ori	r24, 0x01	; 1
 178:	80 83       	st	Z, r24
	
	sei();
 17a:	78 94       	sei

	while(1);
 17c:	ff cf       	rjmp	.-2      	; 0x17c <main+0x22>

0000017e <_exit>:
 17e:	f8 94       	cli

00000180 <__stop_program>:
 180:	ff cf       	rjmp	.-2      	; 0x180 <__stop_program>
