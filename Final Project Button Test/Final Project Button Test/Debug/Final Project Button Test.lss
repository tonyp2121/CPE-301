
Final Project Button Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000000fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000a8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000000fc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000012c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000016c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000067c  00000000  00000000  0000018c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005f8  00000000  00000000  00000808  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000210  00000000  00000000  00000e00  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001010  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000362  00000000  00000000  00001034  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  00001396  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 52 00 	jmp	0xa4	; 0xa4 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:

int main(void)
{
	//DDRD |= (1<<PD3); //Nakes first pin of PORTC as Output
	// OR DDRC = 0x01;
	DDRD |= 0b00001111;
  80:	8a b1       	in	r24, 0x0a	; 10
  82:	8f 60       	ori	r24, 0x0F	; 15
  84:	8a b9       	out	0x0a, r24	; 10
	// OR DDRD = 0x00; //Makes all pins of PORTD input
	while(1) //infinite loop
	{	
		if ((PIND && 0x0F) > 0){
			if (PIND & 0x01){PORTD = 0x04;}
			else if (PIND & 0x02){PORTD = 0x08;}
  86:	28 e0       	ldi	r18, 0x08	; 8
	DDRD |= 0b00001111;
	// OR DDRD = 0x00; //Makes all pins of PORTD input
	while(1) //infinite loop
	{	
		if ((PIND && 0x0F) > 0){
			if (PIND & 0x01){PORTD = 0x04;}
  88:	94 e0       	ldi	r25, 0x04	; 4
	// OR DDRC = 0x01;
	DDRD |= 0b00001111;
	// OR DDRD = 0x00; //Makes all pins of PORTD input
	while(1) //infinite loop
	{	
		if ((PIND && 0x0F) > 0){
  8a:	89 b1       	in	r24, 0x09	; 9
  8c:	88 23       	and	r24, r24
  8e:	e9 f3       	breq	.-6      	; 0x8a <main+0xa>
			if (PIND & 0x01){PORTD = 0x04;}
  90:	48 9b       	sbis	0x09, 0	; 9
  92:	02 c0       	rjmp	.+4      	; 0x98 <main+0x18>
  94:	9b b9       	out	0x0b, r25	; 11
  96:	f9 cf       	rjmp	.-14     	; 0x8a <main+0xa>
			else if (PIND & 0x02){PORTD = 0x08;}
  98:	49 9b       	sbis	0x09, 1	; 9
  9a:	02 c0       	rjmp	.+4      	; 0xa0 <main+0x20>
  9c:	2b b9       	out	0x0b, r18	; 11
  9e:	f5 cf       	rjmp	.-22     	; 0x8a <main+0xa>
			//PORTD = (PIND << 2);}
			else{PORTD = 0x00;}
  a0:	1b b8       	out	0x0b, r1	; 11
  a2:	f3 cf       	rjmp	.-26     	; 0x8a <main+0xa>

000000a4 <_exit>:
  a4:	f8 94       	cli

000000a6 <__stop_program>:
  a6:	ff cf       	rjmp	.-2      	; 0xa6 <__stop_program>
