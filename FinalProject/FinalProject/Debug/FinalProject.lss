
FinalProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000023a  00800100  00001318  000013ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001318  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000204  0080033a  0080033a  000015e6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000015e6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001618  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000178  00000000  00000000  00001658  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000030f1  00000000  00000000  000017d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e63  00000000  00000000  000048c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001646  00000000  00000000  00005724  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000444  00000000  00000000  00006d6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000819  00000000  00000000  000071b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000023b6  00000000  00000000  000079c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000168  00000000  00000000  00009d7f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 24 01 	jmp	0x248	; 0x248 <__ctors_end>
       4:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
       8:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
       c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      10:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      14:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      18:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      1c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      20:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      24:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      28:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      2c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      30:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      34:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      38:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      3c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      40:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      44:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      48:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      4c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      50:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      54:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      58:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      5c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      60:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      64:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>

00000068 <CHARSET>:
      68:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
      78:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
      88:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
      98:	1c 00 14 08 3e 08 14 08 08 3e 08 08 00 50 30 00     ....>....>...P0.
      a8:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
      b8:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
      c8:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
      d8:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
      e8:	29 1e 00 36 36 00 00 00 56 36 00 00 08 14 22 41     )..66...V6...."A
      f8:	00 14 14 14 14 14 00 41 22 14 08 02 01 51 09 06     .......A"....Q..
     108:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
     118:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     128:	09 09 01 3e 41 49 49 7a 7f 08 08 08 7f 00 41 7f     ...>AIIz......A.
     138:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     148:	40 7f 02 0c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     158:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     168:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     178:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 07 08 70     @ .?@8@?c...c..p
     188:	08 07 61 51 49 45 43 00 7f 41 41 00 02 04 08 10     ..aQIEC..AA.....
     198:	20 00 41 41 7f 00 04 02 01 02 04 40 40 40 40 40      .AA.......@@@@@
     1a8:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     1b8:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     1c8:	09 01 02 0c 52 52 52 3e 7f 08 04 04 78 00 44 7d     ....RRR>....x.D}
     1d8:	40 00 20 40 44 3d 00 7f 10 28 44 00 00 41 7f 40     @. @D=...(D..A.@
     1e8:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     1f8:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     208:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     218:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     228:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
     238:	00 00 41 36 08 00 10 08 08 10 08 00 00 00 00 00     ..A6............

00000248 <__ctors_end>:
     248:	11 24       	eor	r1, r1
     24a:	1f be       	out	0x3f, r1	; 63
     24c:	cf ef       	ldi	r28, 0xFF	; 255
     24e:	d8 e0       	ldi	r29, 0x08	; 8
     250:	de bf       	out	0x3e, r29	; 62
     252:	cd bf       	out	0x3d, r28	; 61

00000254 <__do_copy_data>:
     254:	13 e0       	ldi	r17, 0x03	; 3
     256:	a0 e0       	ldi	r26, 0x00	; 0
     258:	b1 e0       	ldi	r27, 0x01	; 1
     25a:	e8 e1       	ldi	r30, 0x18	; 24
     25c:	f3 e1       	ldi	r31, 0x13	; 19
     25e:	02 c0       	rjmp	.+4      	; 0x264 <__do_copy_data+0x10>
     260:	05 90       	lpm	r0, Z+
     262:	0d 92       	st	X+, r0
     264:	aa 33       	cpi	r26, 0x3A	; 58
     266:	b1 07       	cpc	r27, r17
     268:	d9 f7       	brne	.-10     	; 0x260 <__do_copy_data+0xc>

0000026a <__do_clear_bss>:
     26a:	25 e0       	ldi	r18, 0x05	; 5
     26c:	aa e3       	ldi	r26, 0x3A	; 58
     26e:	b3 e0       	ldi	r27, 0x03	; 3
     270:	01 c0       	rjmp	.+2      	; 0x274 <.do_clear_bss_start>

00000272 <.do_clear_bss_loop>:
     272:	1d 92       	st	X+, r1

00000274 <.do_clear_bss_start>:
     274:	ae 33       	cpi	r26, 0x3E	; 62
     276:	b2 07       	cpc	r27, r18
     278:	e1 f7       	brne	.-8      	; 0x272 <.do_clear_bss_loop>
     27a:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <main>
     27e:	0c 94 8a 09 	jmp	0x1314	; 0x1314 <_exit>

00000282 <__bad_interrupt>:
     282:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000286 <write>:
		nokia_lcd.screen[i] = 0x00;
}

void nokia_lcd_power(uint8_t on)
{
	write_cmd(on ? 0x20 : 0x24);
     286:	29 98       	cbi	0x05, 1	; 5
     288:	66 23       	and	r22, r22
     28a:	11 f0       	breq	.+4      	; 0x290 <write+0xa>
     28c:	2b 9a       	sbi	0x05, 3	; 5
     28e:	15 c0       	rjmp	.+42     	; 0x2ba <write+0x34>
     290:	2b 98       	cbi	0x05, 3	; 5
     292:	13 c0       	rjmp	.+38     	; 0x2ba <write+0x34>
     294:	ac 01       	movw	r20, r24
     296:	02 2e       	mov	r0, r18
     298:	02 c0       	rjmp	.+4      	; 0x29e <write+0x18>
     29a:	55 95       	asr	r21
     29c:	47 95       	ror	r20
     29e:	0a 94       	dec	r0
     2a0:	e2 f7       	brpl	.-8      	; 0x29a <write+0x14>
     2a2:	40 ff       	sbrs	r20, 0
     2a4:	02 c0       	rjmp	.+4      	; 0x2aa <write+0x24>
     2a6:	2c 9a       	sbi	0x05, 4	; 5
     2a8:	01 c0       	rjmp	.+2      	; 0x2ac <write+0x26>
     2aa:	2c 98       	cbi	0x05, 4	; 5
     2ac:	2d 9a       	sbi	0x05, 5	; 5
     2ae:	2d 98       	cbi	0x05, 5	; 5
     2b0:	21 50       	subi	r18, 0x01	; 1
     2b2:	31 09       	sbc	r19, r1
     2b4:	78 f7       	brcc	.-34     	; 0x294 <write+0xe>
     2b6:	29 9a       	sbi	0x05, 1	; 5
     2b8:	08 95       	ret
     2ba:	27 e0       	ldi	r18, 0x07	; 7
     2bc:	30 e0       	ldi	r19, 0x00	; 0
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	e9 cf       	rjmp	.-46     	; 0x294 <write+0xe>

000002c2 <write_cmd>:
     2c2:	60 e0       	ldi	r22, 0x00	; 0
     2c4:	0e 94 43 01 	call	0x286	; 0x286 <write>
     2c8:	08 95       	ret

000002ca <nokia_lcd_init>:
     2ca:	cf 93       	push	r28
     2cc:	df 93       	push	r29
     2ce:	21 9a       	sbi	0x04, 1	; 4
     2d0:	22 9a       	sbi	0x04, 2	; 4
     2d2:	23 9a       	sbi	0x04, 3	; 4
     2d4:	24 9a       	sbi	0x04, 4	; 4
     2d6:	25 9a       	sbi	0x04, 5	; 4
     2d8:	2a 9a       	sbi	0x05, 2	; 5
     2da:	29 9a       	sbi	0x05, 1	; 5
     2dc:	8f e3       	ldi	r24, 0x3F	; 63
     2de:	9c e9       	ldi	r25, 0x9C	; 156
     2e0:	01 97       	sbiw	r24, 0x01	; 1
     2e2:	f1 f7       	brne	.-4      	; 0x2e0 <nokia_lcd_init+0x16>
     2e4:	00 c0       	rjmp	.+0      	; 0x2e6 <nokia_lcd_init+0x1c>
     2e6:	00 00       	nop
     2e8:	2a 98       	cbi	0x05, 2	; 5
     2ea:	9f ef       	ldi	r25, 0xFF	; 255
     2ec:	2a e6       	ldi	r18, 0x6A	; 106
     2ee:	83 e0       	ldi	r24, 0x03	; 3
     2f0:	91 50       	subi	r25, 0x01	; 1
     2f2:	20 40       	sbci	r18, 0x00	; 0
     2f4:	80 40       	sbci	r24, 0x00	; 0
     2f6:	e1 f7       	brne	.-8      	; 0x2f0 <nokia_lcd_init+0x26>
     2f8:	00 c0       	rjmp	.+0      	; 0x2fa <nokia_lcd_init+0x30>
     2fa:	00 00       	nop
     2fc:	2a 9a       	sbi	0x05, 2	; 5
     2fe:	29 98       	cbi	0x05, 1	; 5
     300:	81 e2       	ldi	r24, 0x21	; 33
     302:	0e 94 61 01 	call	0x2c2	; 0x2c2 <write_cmd>
     306:	83 e1       	ldi	r24, 0x13	; 19
     308:	0e 94 61 01 	call	0x2c2	; 0x2c2 <write_cmd>
     30c:	86 e0       	ldi	r24, 0x06	; 6
     30e:	0e 94 61 01 	call	0x2c2	; 0x2c2 <write_cmd>
     312:	82 ec       	ldi	r24, 0xC2	; 194
     314:	0e 94 61 01 	call	0x2c2	; 0x2c2 <write_cmd>
     318:	80 e2       	ldi	r24, 0x20	; 32
     31a:	0e 94 61 01 	call	0x2c2	; 0x2c2 <write_cmd>
     31e:	89 e0       	ldi	r24, 0x09	; 9
     320:	0e 94 61 01 	call	0x2c2	; 0x2c2 <write_cmd>
     324:	80 e8       	ldi	r24, 0x80	; 128
     326:	0e 94 61 01 	call	0x2c2	; 0x2c2 <write_cmd>
     32a:	80 e4       	ldi	r24, 0x40	; 64
     32c:	0e 94 61 01 	call	0x2c2	; 0x2c2 <write_cmd>
     330:	c8 ef       	ldi	r28, 0xF8	; 248
     332:	d1 e0       	ldi	r29, 0x01	; 1
     334:	61 e0       	ldi	r22, 0x01	; 1
     336:	80 e0       	ldi	r24, 0x00	; 0
     338:	0e 94 43 01 	call	0x286	; 0x286 <write>
     33c:	21 97       	sbiw	r28, 0x01	; 1
     33e:	d1 f7       	brne	.-12     	; 0x334 <nokia_lcd_init+0x6a>
     340:	88 e0       	ldi	r24, 0x08	; 8
     342:	0e 94 61 01 	call	0x2c2	; 0x2c2 <write_cmd>
     346:	8c e0       	ldi	r24, 0x0C	; 12
     348:	0e 94 61 01 	call	0x2c2	; 0x2c2 <write_cmd>
     34c:	df 91       	pop	r29
     34e:	cf 91       	pop	r28
     350:	08 95       	ret

00000352 <nokia_lcd_clear>:
     352:	80 e8       	ldi	r24, 0x80	; 128
     354:	0e 94 61 01 	call	0x2c2	; 0x2c2 <write_cmd>
     358:	80 e4       	ldi	r24, 0x40	; 64
     35a:	0e 94 61 01 	call	0x2c2	; 0x2c2 <write_cmd>
     35e:	10 92 32 05 	sts	0x0532, r1	; 0x800532 <__data_end+0x1f8>
     362:	10 92 33 05 	sts	0x0533, r1	; 0x800533 <__data_end+0x1f9>
     366:	ea e3       	ldi	r30, 0x3A	; 58
     368:	f3 e0       	ldi	r31, 0x03	; 3
     36a:	82 e3       	ldi	r24, 0x32	; 50
     36c:	95 e0       	ldi	r25, 0x05	; 5
     36e:	11 92       	st	Z+, r1
     370:	e8 17       	cp	r30, r24
     372:	f9 07       	cpc	r31, r25
     374:	e1 f7       	brne	.-8      	; 0x36e <nokia_lcd_clear+0x1c>
     376:	08 95       	ret

00000378 <nokia_lcd_set_pixel>:
}

void nokia_lcd_set_pixel(uint8_t x, uint8_t y, uint8_t value)
{
	uint8_t *byte = &nokia_lcd.screen[y/8*84+x];
     378:	26 2f       	mov	r18, r22
     37a:	26 95       	lsr	r18
     37c:	26 95       	lsr	r18
     37e:	26 95       	lsr	r18
     380:	90 e0       	ldi	r25, 0x00	; 0
     382:	34 e5       	ldi	r19, 0x54	; 84
     384:	23 9f       	mul	r18, r19
     386:	80 0d       	add	r24, r0
     388:	91 1d       	adc	r25, r1
     38a:	11 24       	eor	r1, r1
	if (value)
     38c:	44 23       	and	r20, r20
     38e:	79 f0       	breq	.+30     	; 0x3ae <nokia_lcd_set_pixel+0x36>
		*byte |= (1 << (y % 8));
     390:	fc 01       	movw	r30, r24
     392:	e6 5c       	subi	r30, 0xC6	; 198
     394:	fc 4f       	sbci	r31, 0xFC	; 252
     396:	67 70       	andi	r22, 0x07	; 7
     398:	81 e0       	ldi	r24, 0x01	; 1
     39a:	90 e0       	ldi	r25, 0x00	; 0
     39c:	02 c0       	rjmp	.+4      	; 0x3a2 <nokia_lcd_set_pixel+0x2a>
     39e:	88 0f       	add	r24, r24
     3a0:	99 1f       	adc	r25, r25
     3a2:	6a 95       	dec	r22
     3a4:	e2 f7       	brpl	.-8      	; 0x39e <nokia_lcd_set_pixel+0x26>
     3a6:	90 81       	ld	r25, Z
     3a8:	89 2b       	or	r24, r25
     3aa:	80 83       	st	Z, r24
     3ac:	08 95       	ret
	else
		*byte &= ~(1 << (y %8 ));
     3ae:	fc 01       	movw	r30, r24
     3b0:	e6 5c       	subi	r30, 0xC6	; 198
     3b2:	fc 4f       	sbci	r31, 0xFC	; 252
     3b4:	67 70       	andi	r22, 0x07	; 7
     3b6:	81 e0       	ldi	r24, 0x01	; 1
     3b8:	90 e0       	ldi	r25, 0x00	; 0
     3ba:	02 c0       	rjmp	.+4      	; 0x3c0 <nokia_lcd_set_pixel+0x48>
     3bc:	88 0f       	add	r24, r24
     3be:	99 1f       	adc	r25, r25
     3c0:	6a 95       	dec	r22
     3c2:	e2 f7       	brpl	.-8      	; 0x3bc <nokia_lcd_set_pixel+0x44>
     3c4:	80 95       	com	r24
     3c6:	90 81       	ld	r25, Z
     3c8:	89 23       	and	r24, r25
     3ca:	80 83       	st	Z, r24
     3cc:	08 95       	ret

000003ce <nokia_lcd_write_char>:
}

void nokia_lcd_write_char(char code, uint8_t scale)
{
     3ce:	5f 92       	push	r5
     3d0:	6f 92       	push	r6
     3d2:	7f 92       	push	r7
     3d4:	8f 92       	push	r8
     3d6:	9f 92       	push	r9
     3d8:	af 92       	push	r10
     3da:	bf 92       	push	r11
     3dc:	cf 92       	push	r12
     3de:	df 92       	push	r13
     3e0:	ef 92       	push	r14
     3e2:	ff 92       	push	r15
     3e4:	0f 93       	push	r16
     3e6:	1f 93       	push	r17
     3e8:	cf 93       	push	r28
     3ea:	df 93       	push	r29
     3ec:	56 2e       	mov	r5, r22
	register uint8_t x, y;

	for (x = 0; x < 5*scale; x++)
     3ee:	26 2f       	mov	r18, r22
     3f0:	30 e0       	ldi	r19, 0x00	; 0
     3f2:	49 01       	movw	r8, r18
     3f4:	88 0c       	add	r8, r8
     3f6:	99 1c       	adc	r9, r9
     3f8:	88 0c       	add	r8, r8
     3fa:	99 1c       	adc	r9, r9
     3fc:	82 0e       	add	r8, r18
     3fe:	93 1e       	adc	r9, r19
     400:	18 14       	cp	r1, r8
     402:	19 04       	cpc	r1, r9
     404:	0c f0       	brlt	.+2      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     406:	5d c0       	rjmp	.+186    	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
		for (y = 0; y < 7*scale; y++)
     408:	89 01       	movw	r16, r18
     40a:	00 0f       	add	r16, r16
     40c:	11 1f       	adc	r17, r17
     40e:	00 0f       	add	r16, r16
     410:	11 1f       	adc	r17, r17
     412:	00 0f       	add	r16, r16
     414:	11 1f       	adc	r17, r17
     416:	02 1b       	sub	r16, r18
     418:	13 0b       	sbc	r17, r19
     41a:	61 2c       	mov	r6, r1
			if (pgm_read_byte(&CHARSET[code-32][x/scale]) & (1 << y/scale))
     41c:	a8 2e       	mov	r10, r24
     41e:	b1 2c       	mov	r11, r1
     420:	c5 01       	movw	r24, r10
     422:	80 97       	sbiw	r24, 0x20	; 32
     424:	5c 01       	movw	r10, r24
     426:	aa 0c       	add	r10, r10
     428:	bb 1c       	adc	r11, r11
     42a:	aa 0c       	add	r10, r10
     42c:	bb 1c       	adc	r11, r11
     42e:	a8 0e       	add	r10, r24
     430:	b9 1e       	adc	r11, r25
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 1);
			else
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 0);
     432:	0f 2e       	mov	r0, r31
     434:	f3 e3       	ldi	r31, 0x33	; 51
     436:	cf 2e       	mov	r12, r31
     438:	f5 e0       	ldi	r31, 0x05	; 5
     43a:	df 2e       	mov	r13, r31
     43c:	f0 2d       	mov	r31, r0
     43e:	0f 2e       	mov	r0, r31
     440:	f2 e3       	ldi	r31, 0x32	; 50
     442:	ef 2e       	mov	r14, r31
     444:	f5 e0       	ldi	r31, 0x05	; 5
     446:	ff 2e       	mov	r15, r31
     448:	f0 2d       	mov	r31, r0
     44a:	2d c0       	rjmp	.+90     	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
{
	register uint8_t x, y;

	for (x = 0; x < 5*scale; x++)
		for (y = 0; y < 7*scale; y++)
			if (pgm_read_byte(&CHARSET[code-32][x/scale]) & (1 << y/scale))
     44c:	fe 01       	movw	r30, r28
     44e:	24 91       	lpm	r18, Z
     450:	30 e0       	ldi	r19, 0x00	; 0
     452:	87 2d       	mov	r24, r7
     454:	65 2d       	mov	r22, r5
     456:	0e 94 49 09 	call	0x1292	; 0x1292 <__udivmodqi4>
     45a:	02 c0       	rjmp	.+4      	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
     45c:	35 95       	asr	r19
     45e:	27 95       	ror	r18
     460:	8a 95       	dec	r24
     462:	e2 f7       	brpl	.-8      	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
     464:	20 ff       	sbrs	r18, 0
     466:	0a c0       	rjmp	.+20     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 1);
     468:	f6 01       	movw	r30, r12
     46a:	60 81       	ld	r22, Z
     46c:	67 0d       	add	r22, r7
     46e:	f7 01       	movw	r30, r14
     470:	80 81       	ld	r24, Z
     472:	41 e0       	ldi	r20, 0x01	; 1
     474:	86 0d       	add	r24, r6
     476:	0e 94 bc 01 	call	0x378	; 0x378 <nokia_lcd_set_pixel>
     47a:	09 c0       	rjmp	.+18     	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
			else
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 0);
     47c:	f6 01       	movw	r30, r12
     47e:	60 81       	ld	r22, Z
     480:	67 0d       	add	r22, r7
     482:	f7 01       	movw	r30, r14
     484:	80 81       	ld	r24, Z
     486:	40 e0       	ldi	r20, 0x00	; 0
     488:	86 0d       	add	r24, r6
     48a:	0e 94 bc 01 	call	0x378	; 0x378 <nokia_lcd_set_pixel>
void nokia_lcd_write_char(char code, uint8_t scale)
{
	register uint8_t x, y;

	for (x = 0; x < 5*scale; x++)
		for (y = 0; y < 7*scale; y++)
     48e:	73 94       	inc	r7
     490:	87 2d       	mov	r24, r7
     492:	90 e0       	ldi	r25, 0x00	; 0
     494:	80 17       	cp	r24, r16
     496:	91 07       	cpc	r25, r17
     498:	cc f2       	brlt	.-78     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>

void nokia_lcd_write_char(char code, uint8_t scale)
{
	register uint8_t x, y;

	for (x = 0; x < 5*scale; x++)
     49a:	63 94       	inc	r6
     49c:	86 2d       	mov	r24, r6
     49e:	90 e0       	ldi	r25, 0x00	; 0
     4a0:	88 15       	cp	r24, r8
     4a2:	99 05       	cpc	r25, r9
     4a4:	74 f4       	brge	.+28     	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
		for (y = 0; y < 7*scale; y++)
     4a6:	10 16       	cp	r1, r16
     4a8:	11 06       	cpc	r1, r17
     4aa:	bc f7       	brge	.-18     	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
			if (pgm_read_byte(&CHARSET[code-32][x/scale]) & (1 << y/scale))
     4ac:	86 2d       	mov	r24, r6
     4ae:	65 2d       	mov	r22, r5
     4b0:	0e 94 49 09 	call	0x1292	; 0x1292 <__udivmodqi4>
     4b4:	e5 01       	movw	r28, r10
     4b6:	c8 0f       	add	r28, r24
     4b8:	d1 1d       	adc	r29, r1
     4ba:	c8 59       	subi	r28, 0x98	; 152
     4bc:	df 4f       	sbci	r29, 0xFF	; 255
     4be:	71 2c       	mov	r7, r1
     4c0:	c5 cf       	rjmp	.-118    	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 1);
			else
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 0);

	nokia_lcd.cursor_x += 5*scale + 1;
     4c2:	80 91 32 05 	lds	r24, 0x0532	; 0x800532 <__data_end+0x1f8>
     4c6:	91 e0       	ldi	r25, 0x01	; 1
     4c8:	98 0f       	add	r25, r24
     4ca:	85 2d       	mov	r24, r5
     4cc:	88 0f       	add	r24, r24
     4ce:	88 0f       	add	r24, r24
     4d0:	85 0d       	add	r24, r5
     4d2:	89 0f       	add	r24, r25
	if (nokia_lcd.cursor_x >= 84) {
     4d4:	84 35       	cpi	r24, 0x54	; 84
     4d6:	18 f4       	brcc	.+6      	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
			if (pgm_read_byte(&CHARSET[code-32][x/scale]) & (1 << y/scale))
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 1);
			else
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 0);

	nokia_lcd.cursor_x += 5*scale + 1;
     4d8:	80 93 32 05 	sts	0x0532, r24	; 0x800532 <__data_end+0x1f8>
     4dc:	0e c0       	rjmp	.+28     	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
	if (nokia_lcd.cursor_x >= 84) {
		nokia_lcd.cursor_x = 0;
     4de:	10 92 32 05 	sts	0x0532, r1	; 0x800532 <__data_end+0x1f8>
		nokia_lcd.cursor_y += 7*scale + 1;
     4e2:	e3 e3       	ldi	r30, 0x33	; 51
     4e4:	f5 e0       	ldi	r31, 0x05	; 5
     4e6:	80 81       	ld	r24, Z
     4e8:	91 e0       	ldi	r25, 0x01	; 1
     4ea:	98 0f       	add	r25, r24
     4ec:	85 2d       	mov	r24, r5
     4ee:	88 0f       	add	r24, r24
     4f0:	88 0f       	add	r24, r24
     4f2:	88 0f       	add	r24, r24
     4f4:	85 19       	sub	r24, r5
     4f6:	89 0f       	add	r24, r25
     4f8:	80 83       	st	Z, r24
	}
	if (nokia_lcd.cursor_y >= 48) {
     4fa:	80 91 33 05 	lds	r24, 0x0533	; 0x800533 <__data_end+0x1f9>
     4fe:	80 33       	cpi	r24, 0x30	; 48
     500:	20 f0       	brcs	.+8      	; 0x50a <__LOCK_REGION_LENGTH__+0x10a>
		nokia_lcd.cursor_x = 0;
     502:	10 92 32 05 	sts	0x0532, r1	; 0x800532 <__data_end+0x1f8>
		nokia_lcd.cursor_y = 0;
     506:	10 92 33 05 	sts	0x0533, r1	; 0x800533 <__data_end+0x1f9>
	}
}
     50a:	df 91       	pop	r29
     50c:	cf 91       	pop	r28
     50e:	1f 91       	pop	r17
     510:	0f 91       	pop	r16
     512:	ff 90       	pop	r15
     514:	ef 90       	pop	r14
     516:	df 90       	pop	r13
     518:	cf 90       	pop	r12
     51a:	bf 90       	pop	r11
     51c:	af 90       	pop	r10
     51e:	9f 90       	pop	r9
     520:	8f 90       	pop	r8
     522:	7f 90       	pop	r7
     524:	6f 90       	pop	r6
     526:	5f 90       	pop	r5
     528:	08 95       	ret

0000052a <nokia_lcd_write_string>:

void nokia_lcd_write_string(const char *str, uint8_t scale)
{
     52a:	1f 93       	push	r17
     52c:	cf 93       	push	r28
     52e:	df 93       	push	r29
     530:	ec 01       	movw	r28, r24
	while(*str)
     532:	88 81       	ld	r24, Y
     534:	88 23       	and	r24, r24
     536:	41 f0       	breq	.+16     	; 0x548 <nokia_lcd_write_string+0x1e>
     538:	16 2f       	mov	r17, r22
     53a:	21 96       	adiw	r28, 0x01	; 1
		nokia_lcd_write_char(*str++, scale);
     53c:	61 2f       	mov	r22, r17
     53e:	0e 94 e7 01 	call	0x3ce	; 0x3ce <nokia_lcd_write_char>
	}
}

void nokia_lcd_write_string(const char *str, uint8_t scale)
{
	while(*str)
     542:	89 91       	ld	r24, Y+
     544:	81 11       	cpse	r24, r1
     546:	fa cf       	rjmp	.-12     	; 0x53c <nokia_lcd_write_string+0x12>
		nokia_lcd_write_char(*str++, scale);
}
     548:	df 91       	pop	r29
     54a:	cf 91       	pop	r28
     54c:	1f 91       	pop	r17
     54e:	08 95       	ret

00000550 <nokia_lcd_set_cursor>:

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
     550:	80 93 32 05 	sts	0x0532, r24	; 0x800532 <__data_end+0x1f8>
	nokia_lcd.cursor_y = y;
     554:	60 93 33 05 	sts	0x0533, r22	; 0x800533 <__data_end+0x1f9>
     558:	08 95       	ret

0000055a <nokia_lcd_render>:
}

void nokia_lcd_render(void)
{
     55a:	0f 93       	push	r16
     55c:	1f 93       	push	r17
     55e:	cf 93       	push	r28
     560:	df 93       	push	r29
	register unsigned i;
	/* Set column and row to 0 */
	write_cmd(0x80);
     562:	80 e8       	ldi	r24, 0x80	; 128
     564:	0e 94 61 01 	call	0x2c2	; 0x2c2 <write_cmd>
	write_cmd(0x40);
     568:	80 e4       	ldi	r24, 0x40	; 64
     56a:	0e 94 61 01 	call	0x2c2	; 0x2c2 <write_cmd>
     56e:	ca e3       	ldi	r28, 0x3A	; 58
     570:	d3 e0       	ldi	r29, 0x03	; 3
     572:	02 e3       	ldi	r16, 0x32	; 50
     574:	15 e0       	ldi	r17, 0x05	; 5
	write(cmd, 0);
}

static void write_data(uint8_t data)
{
	write(data, 1);
     576:	61 e0       	ldi	r22, 0x01	; 1
     578:	89 91       	ld	r24, Y+
     57a:	0e 94 43 01 	call	0x286	; 0x286 <write>
	/* Set column and row to 0 */
	write_cmd(0x80);
	write_cmd(0x40);

	/* Write screen to display */
	for (i = 0; i < 504; i++)
     57e:	c0 17       	cp	r28, r16
     580:	d1 07       	cpc	r29, r17
     582:	c9 f7       	brne	.-14     	; 0x576 <nokia_lcd_render+0x1c>
		write_data(nokia_lcd.screen[i]);
     584:	df 91       	pop	r29
     586:	cf 91       	pop	r28
     588:	1f 91       	pop	r17
     58a:	0f 91       	pop	r16
     58c:	08 95       	ret

0000058e <rtc2_write_byte>:
// Routine used for pretty much any operation {{{
#if RTC2_READ || RTC2_WRITE ||RTC2_RAM || RTC2_UTILITY
static void rtc2_write_byte(uint8_t byte){
  uint8_t i;

  RTC2_IO_OUTPUT;
     58e:	3c 9a       	sbi	0x07, 4	; 7
     590:	98 e0       	ldi	r25, 0x08	; 8

  for(i = 0; i < 8; ++i){
    if(byte & 1)
     592:	80 ff       	sbrs	r24, 0
     594:	02 c0       	rjmp	.+4      	; 0x59a <rtc2_write_byte+0xc>
      RTC2_IO_HIGH;
     596:	44 9a       	sbi	0x08, 4	; 8
     598:	01 c0       	rjmp	.+2      	; 0x59c <rtc2_write_byte+0xe>
    else
      RTC2_IO_LOW;
     59a:	44 98       	cbi	0x08, 4	; 8

    RTC2_CLK_LOW;
     59c:	45 98       	cbi	0x08, 5	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     59e:	00 c0       	rjmp	.+0      	; 0x5a0 <rtc2_write_byte+0x12>
    _delay_us(2);
    RTC2_CLK_HIGH;
     5a0:	45 9a       	sbi	0x08, 5	; 8
     5a2:	00 c0       	rjmp	.+0      	; 0x5a4 <rtc2_write_byte+0x16>
    _delay_us(2);
    byte >>= 1;
     5a4:	86 95       	lsr	r24
     5a6:	91 50       	subi	r25, 0x01	; 1
static void rtc2_write_byte(uint8_t byte){
  uint8_t i;

  RTC2_IO_OUTPUT;

  for(i = 0; i < 8; ++i){
     5a8:	a1 f7       	brne	.-24     	; 0x592 <rtc2_write_byte+0x4>
    _delay_us(2);
    RTC2_CLK_HIGH;
    _delay_us(2);
    byte >>= 1;
  }
}
     5aa:	08 95       	ret

000005ac <rtc2_write>:
// }}}

// Write to register {{{
#if RTC2_WRITE || RTC2_RAM || RTC2_UTILITY

static void rtc2_write(uint8_t reg, uint8_t val){
     5ac:	cf 93       	push	r28
     5ae:	c6 2f       	mov	r28, r22
}
// }}}

// Utility stuff used to reset current transfer state {{{
static inline void rtc2_reset(void){
  RTC2_STOP_TRANSMISSION;
     5b0:	43 98       	cbi	0x08, 3	; 8
     5b2:	45 98       	cbi	0x08, 5	; 8
  RTC2_CE_HIGH;
     5b4:	43 9a       	sbi	0x08, 3	; 8

// Write to register {{{
#if RTC2_WRITE || RTC2_RAM || RTC2_UTILITY

static void rtc2_write(uint8_t reg, uint8_t val){
  RTC2_START_TRANSMISSION(reg);
     5b6:	0e 94 c7 02 	call	0x58e	; 0x58e <rtc2_write_byte>
  rtc2_write_byte(val);
     5ba:	8c 2f       	mov	r24, r28
     5bc:	0e 94 c7 02 	call	0x58e	; 0x58e <rtc2_write_byte>
  RTC2_STOP_TRANSMISSION;
     5c0:	43 98       	cbi	0x08, 3	; 8
     5c2:	45 98       	cbi	0x08, 5	; 8
}
     5c4:	cf 91       	pop	r28
     5c6:	08 95       	ret

000005c8 <rtc2_read_byte>:
#if RTC2_READ || RTC2_UTILITY || RTC2_RAM

static uint8_t rtc2_read_byte(void){
  uint8_t i, ret = 0;

  RTC2_IO_INPUT;
     5c8:	3c 98       	cbi	0x07, 4	; 7
     5ca:	98 e0       	ldi	r25, 0x08	; 8

// Low level read functions {{{
#if RTC2_READ || RTC2_UTILITY || RTC2_RAM

static uint8_t rtc2_read_byte(void){
  uint8_t i, ret = 0;
     5cc:	80 e0       	ldi	r24, 0x00	; 0

  RTC2_IO_INPUT;

  for(i = 0; i < 8; ++i){
    RTC2_CLK_HIGH;
     5ce:	45 9a       	sbi	0x08, 5	; 8
     5d0:	00 c0       	rjmp	.+0      	; 0x5d2 <rtc2_read_byte+0xa>
    _delay_us(2);
    RTC2_CLK_LOW;
     5d2:	45 98       	cbi	0x08, 5	; 8
     5d4:	00 c0       	rjmp	.+0      	; 0x5d6 <rtc2_read_byte+0xe>
    _delay_us(2);
    ret >>= 1;
     5d6:	86 95       	lsr	r24

    if(bit_is_set(RTC2_PIN, RTC2_IO))
     5d8:	34 99       	sbic	0x06, 4	; 6
      ret |= _BV(7);
     5da:	80 68       	ori	r24, 0x80	; 128
     5dc:	91 50       	subi	r25, 0x01	; 1
static uint8_t rtc2_read_byte(void){
  uint8_t i, ret = 0;

  RTC2_IO_INPUT;

  for(i = 0; i < 8; ++i){
     5de:	b9 f7       	brne	.-18     	; 0x5ce <rtc2_read_byte+0x6>
    if(bit_is_set(RTC2_PIN, RTC2_IO))
      ret |= _BV(7);
  }

  return ret;
}
     5e0:	08 95       	ret

000005e2 <rtc2_read>:
}
// }}}

// Utility stuff used to reset current transfer state {{{
static inline void rtc2_reset(void){
  RTC2_STOP_TRANSMISSION;
     5e2:	43 98       	cbi	0x08, 3	; 8
     5e4:	45 98       	cbi	0x08, 5	; 8
  RTC2_CE_HIGH;
     5e6:	43 9a       	sbi	0x08, 3	; 8
  return ret;
}

static uint8_t rtc2_read(uint8_t reg){
  uint8_t ret;
  RTC2_START_TRANSMISSION(reg);
     5e8:	0e 94 c7 02 	call	0x58e	; 0x58e <rtc2_write_byte>
  ret = rtc2_read_byte();
     5ec:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <rtc2_read_byte>
  RTC2_STOP_TRANSMISSION;
     5f0:	43 98       	cbi	0x08, 3	; 8
     5f2:	45 98       	cbi	0x08, 5	; 8
  return ret;
}
     5f4:	08 95       	ret

000005f6 <rtc2_init>:
// }}}

// Initializer. Configures I/O ports and maybe sets up global variable {{{
void rtc2_init(void){
  // set all pins to output
  RTC2_DDR |= _BV(RTC2_CE) | _BV(RTC2_CLK) | _BV(RTC2_IO);
     5f6:	87 b1       	in	r24, 0x07	; 7
     5f8:	88 63       	ori	r24, 0x38	; 56
     5fa:	87 b9       	out	0x07, r24	; 7
  // and turn them off
  RTC2_PORT &= ~(_BV(RTC2_CE) | _BV(RTC2_CLK) | _BV(RTC2_IO));
     5fc:	88 b1       	in	r24, 0x08	; 8
     5fe:	87 7c       	andi	r24, 0xC7	; 199
     600:	88 b9       	out	0x08, r24	; 8

  // initialize default global pointer if needed
#if RTC2_DEFAULT && (RTC2_READ || RTC2__WRITE)
  RTC2_VALUE = &rtc2_default;
     602:	84 e3       	ldi	r24, 0x34	; 52
     604:	95 e0       	ldi	r25, 0x05	; 5
     606:	90 93 3d 05 	sts	0x053D, r25	; 0x80053d <RTC2_VALUE+0x1>
     60a:	80 93 3c 05 	sts	0x053C, r24	; 0x80053c <RTC2_VALUE>
     60e:	08 95       	ret

00000610 <rtc2_set>:

static void rtc2_set_val(uint8_t field, uint8_t val){
  rtc2_write(field, rtc2_store_field(field, val));
}

void rtc2_set(rtc2_datetime ptr, uint8_t fields){
     610:	0f 93       	push	r16
     612:	1f 93       	push	r17
     614:	cf 93       	push	r28
     616:	8c 01       	movw	r16, r24
     618:	c6 2f       	mov	r28, r22
#if RTC2_BURST
  if(fields & RTC2_ALL_FIELDS){
     61a:	86 2f       	mov	r24, r22
     61c:	8f 77       	andi	r24, 0x7F	; 127
     61e:	09 f4       	brne	.+2      	; 0x622 <rtc2_set+0x12>
     620:	9f c0       	rjmp	.+318    	; 0x760 <rtc2_set+0x150>
}
// }}}

// Utility stuff used to reset current transfer state {{{
static inline void rtc2_reset(void){
  RTC2_STOP_TRANSMISSION;
     622:	43 98       	cbi	0x08, 3	; 8
     624:	45 98       	cbi	0x08, 5	; 8
  RTC2_CE_HIGH;
     626:	43 9a       	sbi	0x08, 3	; 8
}

void rtc2_set(rtc2_datetime ptr, uint8_t fields){
#if RTC2_BURST
  if(fields & RTC2_ALL_FIELDS){
    RTC2_START_TRANSMISSION(RTC2_BURST_WRITE);
     628:	8e eb       	ldi	r24, 0xBE	; 190
     62a:	0e 94 c7 02 	call	0x58e	; 0x58e <rtc2_write_byte>

    rtc2_write_byte(rtc2_store_field(RTC2_SECONDS_WRITE, ptr->seconds));
     62e:	f8 01       	movw	r30, r16
     630:	20 81       	ld	r18, Z
     632:	cd ec       	ldi	r28, 0xCD	; 205
     634:	2c 9f       	mul	r18, r28
     636:	91 2d       	mov	r25, r1
     638:	11 24       	eor	r1, r1
     63a:	96 95       	lsr	r25
     63c:	96 95       	lsr	r25
     63e:	96 95       	lsr	r25
     640:	f0 e1       	ldi	r31, 0x10	; 16
     642:	9f 9f       	mul	r25, r31
     644:	a0 01       	movw	r20, r0
     646:	11 24       	eor	r1, r1
     648:	84 2f       	mov	r24, r20
     64a:	80 77       	andi	r24, 0x70	; 112
     64c:	99 0f       	add	r25, r25
     64e:	39 2f       	mov	r19, r25
     650:	33 0f       	add	r19, r19
     652:	33 0f       	add	r19, r19
     654:	93 0f       	add	r25, r19
     656:	29 1b       	sub	r18, r25
     658:	82 2b       	or	r24, r18
     65a:	0e 94 c7 02 	call	0x58e	; 0x58e <rtc2_write_byte>
    rtc2_write_byte(rtc2_store_field(RTC2_MINUTES_WRITE, ptr->minutes));
     65e:	f8 01       	movw	r30, r16
     660:	22 81       	ldd	r18, Z+2	; 0x02
     662:	2c 9f       	mul	r18, r28
     664:	91 2d       	mov	r25, r1
     666:	11 24       	eor	r1, r1
     668:	96 95       	lsr	r25
     66a:	96 95       	lsr	r25
     66c:	96 95       	lsr	r25
     66e:	f0 e1       	ldi	r31, 0x10	; 16
     670:	9f 9f       	mul	r25, r31
     672:	a0 01       	movw	r20, r0
     674:	11 24       	eor	r1, r1
     676:	84 2f       	mov	r24, r20
     678:	80 77       	andi	r24, 0x70	; 112
     67a:	99 0f       	add	r25, r25
     67c:	39 2f       	mov	r19, r25
     67e:	33 0f       	add	r19, r19
     680:	33 0f       	add	r19, r19
     682:	93 0f       	add	r25, r19
     684:	29 1b       	sub	r18, r25
     686:	82 2b       	or	r24, r18
     688:	0e 94 c7 02 	call	0x58e	; 0x58e <rtc2_write_byte>
    rtc2_write_byte(rtc2_store_field(RTC2_HOURS_WRITE, ptr->format | ptr->hours));
     68c:	f8 01       	movw	r30, r16
     68e:	97 81       	ldd	r25, Z+7	; 0x07
     690:	81 81       	ldd	r24, Z+1	; 0x01
     692:	98 2b       	or	r25, r24
     694:	9c 9f       	mul	r25, r28
     696:	21 2d       	mov	r18, r1
     698:	11 24       	eor	r1, r1
     69a:	26 95       	lsr	r18
     69c:	26 95       	lsr	r18
     69e:	26 95       	lsr	r18
     6a0:	f0 e1       	ldi	r31, 0x10	; 16
     6a2:	2f 9f       	mul	r18, r31
     6a4:	a0 01       	movw	r20, r0
     6a6:	11 24       	eor	r1, r1
     6a8:	40 71       	andi	r20, 0x10	; 16
     6aa:	89 2f       	mov	r24, r25
     6ac:	80 7a       	andi	r24, 0xA0	; 160
     6ae:	22 0f       	add	r18, r18
     6b0:	32 2f       	mov	r19, r18
     6b2:	33 0f       	add	r19, r19
     6b4:	33 0f       	add	r19, r19
     6b6:	23 0f       	add	r18, r19
     6b8:	92 1b       	sub	r25, r18
     6ba:	89 2b       	or	r24, r25
     6bc:	84 2b       	or	r24, r20
     6be:	0e 94 c7 02 	call	0x58e	; 0x58e <rtc2_write_byte>
    rtc2_write_byte(rtc2_store_field(RTC2_DATE_WRITE, ptr->date));
     6c2:	f8 01       	movw	r30, r16
     6c4:	24 81       	ldd	r18, Z+4	; 0x04
     6c6:	2c 9f       	mul	r18, r28
     6c8:	91 2d       	mov	r25, r1
     6ca:	11 24       	eor	r1, r1
     6cc:	96 95       	lsr	r25
     6ce:	96 95       	lsr	r25
     6d0:	96 95       	lsr	r25
     6d2:	f0 e1       	ldi	r31, 0x10	; 16
     6d4:	9f 9f       	mul	r25, r31
     6d6:	a0 01       	movw	r20, r0
     6d8:	11 24       	eor	r1, r1
     6da:	84 2f       	mov	r24, r20
     6dc:	80 73       	andi	r24, 0x30	; 48
     6de:	99 0f       	add	r25, r25
     6e0:	39 2f       	mov	r19, r25
     6e2:	33 0f       	add	r19, r19
     6e4:	33 0f       	add	r19, r19
     6e6:	93 0f       	add	r25, r19
     6e8:	29 1b       	sub	r18, r25
     6ea:	82 2b       	or	r24, r18
     6ec:	0e 94 c7 02 	call	0x58e	; 0x58e <rtc2_write_byte>
    rtc2_write_byte(rtc2_store_field(RTC2_MONTH_WRITE, ptr->month));
     6f0:	f8 01       	movw	r30, r16
     6f2:	25 81       	ldd	r18, Z+5	; 0x05
     6f4:	2c 9f       	mul	r18, r28
     6f6:	91 2d       	mov	r25, r1
     6f8:	11 24       	eor	r1, r1
     6fa:	96 95       	lsr	r25
     6fc:	96 95       	lsr	r25
     6fe:	96 95       	lsr	r25
     700:	f0 e1       	ldi	r31, 0x10	; 16
     702:	9f 9f       	mul	r25, r31
     704:	a0 01       	movw	r20, r0
     706:	11 24       	eor	r1, r1
     708:	84 2f       	mov	r24, r20
     70a:	80 71       	andi	r24, 0x10	; 16
     70c:	99 0f       	add	r25, r25
     70e:	39 2f       	mov	r19, r25
     710:	33 0f       	add	r19, r19
     712:	33 0f       	add	r19, r19
     714:	93 0f       	add	r25, r19
     716:	29 1b       	sub	r18, r25
     718:	82 2b       	or	r24, r18
     71a:	0e 94 c7 02 	call	0x58e	; 0x58e <rtc2_write_byte>
    rtc2_write_byte(rtc2_store_field(RTC2_WDAY_WRITE, ptr->wday));
     71e:	f8 01       	movw	r30, r16
     720:	83 81       	ldd	r24, Z+3	; 0x03
     722:	83 70       	andi	r24, 0x03	; 3
     724:	0e 94 c7 02 	call	0x58e	; 0x58e <rtc2_write_byte>
    rtc2_write_byte(rtc2_store_field(RTC2_YEAR_WRITE, ptr->year));
     728:	f8 01       	movw	r30, r16
     72a:	96 81       	ldd	r25, Z+6	; 0x06
     72c:	9c 9f       	mul	r25, r28
     72e:	c1 2d       	mov	r28, r1
     730:	11 24       	eor	r1, r1
     732:	c6 95       	lsr	r28
     734:	c6 95       	lsr	r28
     736:	c6 95       	lsr	r28
     738:	f0 e1       	ldi	r31, 0x10	; 16
     73a:	cf 9f       	mul	r28, r31
     73c:	a0 01       	movw	r20, r0
     73e:	11 24       	eor	r1, r1
     740:	cc 0f       	add	r28, r28
     742:	2c 2f       	mov	r18, r28
     744:	22 0f       	add	r18, r18
     746:	22 0f       	add	r18, r18
     748:	c2 0f       	add	r28, r18
     74a:	89 2f       	mov	r24, r25
     74c:	8c 1b       	sub	r24, r28
     74e:	84 2b       	or	r24, r20
     750:	0e 94 c7 02 	call	0x58e	; 0x58e <rtc2_write_byte>
    rtc2_write_byte(0);
     754:	80 e0       	ldi	r24, 0x00	; 0
     756:	0e 94 c7 02 	call	0x58e	; 0x58e <rtc2_write_byte>

    RTC2_STOP_TRANSMISSION;
     75a:	43 98       	cbi	0x08, 3	; 8
     75c:	45 98       	cbi	0x08, 5	; 8
     75e:	a8 c0       	rjmp	.+336    	; 0x8b0 <rtc2_set+0x2a0>
  }else{
#endif
    if(fields & RTC2_SECONDS_FIELD)
     760:	60 ff       	sbrs	r22, 0
     762:	18 c0       	rjmp	.+48     	; 0x794 <rtc2_set+0x184>
      rtc2_set_val(RTC2_SECONDS_WRITE, ptr->seconds);
     764:	f8 01       	movw	r30, r16
     766:	90 81       	ld	r25, Z

  return val;
}

static void rtc2_set_val(uint8_t field, uint8_t val){
  rtc2_write(field, rtc2_store_field(field, val));
     768:	8d ec       	ldi	r24, 0xCD	; 205
     76a:	98 9f       	mul	r25, r24
     76c:	81 2d       	mov	r24, r1
     76e:	11 24       	eor	r1, r1
     770:	86 95       	lsr	r24
     772:	86 95       	lsr	r24
     774:	86 95       	lsr	r24
     776:	f0 e1       	ldi	r31, 0x10	; 16
     778:	8f 9f       	mul	r24, r31
     77a:	b0 01       	movw	r22, r0
     77c:	11 24       	eor	r1, r1
     77e:	60 77       	andi	r22, 0x70	; 112
     780:	88 0f       	add	r24, r24
     782:	28 2f       	mov	r18, r24
     784:	22 0f       	add	r18, r18
     786:	22 0f       	add	r18, r18
     788:	82 0f       	add	r24, r18
     78a:	98 1b       	sub	r25, r24
     78c:	69 2b       	or	r22, r25
     78e:	80 e8       	ldi	r24, 0x80	; 128
     790:	0e 94 d6 02 	call	0x5ac	; 0x5ac <rtc2_write>
  }else{
#endif
    if(fields & RTC2_SECONDS_FIELD)
      rtc2_set_val(RTC2_SECONDS_WRITE, ptr->seconds);

    if(fields & RTC2_MINUTES_FIELD)
     794:	c1 ff       	sbrs	r28, 1
     796:	18 c0       	rjmp	.+48     	; 0x7c8 <rtc2_set+0x1b8>
      rtc2_set_val(RTC2_MINUTES_WRITE, ptr->minutes);
     798:	f8 01       	movw	r30, r16
     79a:	92 81       	ldd	r25, Z+2	; 0x02

  return val;
}

static void rtc2_set_val(uint8_t field, uint8_t val){
  rtc2_write(field, rtc2_store_field(field, val));
     79c:	8d ec       	ldi	r24, 0xCD	; 205
     79e:	98 9f       	mul	r25, r24
     7a0:	81 2d       	mov	r24, r1
     7a2:	11 24       	eor	r1, r1
     7a4:	86 95       	lsr	r24
     7a6:	86 95       	lsr	r24
     7a8:	86 95       	lsr	r24
     7aa:	f0 e1       	ldi	r31, 0x10	; 16
     7ac:	8f 9f       	mul	r24, r31
     7ae:	b0 01       	movw	r22, r0
     7b0:	11 24       	eor	r1, r1
     7b2:	60 77       	andi	r22, 0x70	; 112
     7b4:	88 0f       	add	r24, r24
     7b6:	28 2f       	mov	r18, r24
     7b8:	22 0f       	add	r18, r18
     7ba:	22 0f       	add	r18, r18
     7bc:	82 0f       	add	r24, r18
     7be:	98 1b       	sub	r25, r24
     7c0:	69 2b       	or	r22, r25
     7c2:	82 e8       	ldi	r24, 0x82	; 130
     7c4:	0e 94 d6 02 	call	0x5ac	; 0x5ac <rtc2_write>
      rtc2_set_val(RTC2_SECONDS_WRITE, ptr->seconds);

    if(fields & RTC2_MINUTES_FIELD)
      rtc2_set_val(RTC2_MINUTES_WRITE, ptr->minutes);

    if(fields & RTC2_HOURS_FIELD)
     7c8:	c2 ff       	sbrs	r28, 2
     7ca:	1d c0       	rjmp	.+58     	; 0x806 <rtc2_set+0x1f6>
      rtc2_set_val(RTC2_HOURS_WRITE, (ptr->format | ptr->hours));
     7cc:	f8 01       	movw	r30, r16
     7ce:	67 81       	ldd	r22, Z+7	; 0x07
     7d0:	81 81       	ldd	r24, Z+1	; 0x01
     7d2:	86 2b       	or	r24, r22

  return val;
}

static void rtc2_set_val(uint8_t field, uint8_t val){
  rtc2_write(field, rtc2_store_field(field, val));
     7d4:	9d ec       	ldi	r25, 0xCD	; 205
     7d6:	89 9f       	mul	r24, r25
     7d8:	91 2d       	mov	r25, r1
     7da:	11 24       	eor	r1, r1
     7dc:	96 95       	lsr	r25
     7de:	96 95       	lsr	r25
     7e0:	96 95       	lsr	r25
     7e2:	f0 e1       	ldi	r31, 0x10	; 16
     7e4:	9f 9f       	mul	r25, r31
     7e6:	b0 01       	movw	r22, r0
     7e8:	11 24       	eor	r1, r1
     7ea:	60 71       	andi	r22, 0x10	; 16
     7ec:	38 2f       	mov	r19, r24
     7ee:	30 7a       	andi	r19, 0xA0	; 160
     7f0:	99 0f       	add	r25, r25
     7f2:	29 2f       	mov	r18, r25
     7f4:	22 0f       	add	r18, r18
     7f6:	22 0f       	add	r18, r18
     7f8:	92 0f       	add	r25, r18
     7fa:	89 1b       	sub	r24, r25
     7fc:	83 2b       	or	r24, r19
     7fe:	68 2b       	or	r22, r24
     800:	84 e8       	ldi	r24, 0x84	; 132
     802:	0e 94 d6 02 	call	0x5ac	; 0x5ac <rtc2_write>
      rtc2_set_val(RTC2_MINUTES_WRITE, ptr->minutes);

    if(fields & RTC2_HOURS_FIELD)
      rtc2_set_val(RTC2_HOURS_WRITE, (ptr->format | ptr->hours));

    if(fields & RTC2_DATE_FIELD)
     806:	c3 ff       	sbrs	r28, 3
     808:	18 c0       	rjmp	.+48     	; 0x83a <rtc2_set+0x22a>
      rtc2_set_val(RTC2_DATE_WRITE, ptr->date);
     80a:	f8 01       	movw	r30, r16
     80c:	94 81       	ldd	r25, Z+4	; 0x04

  return val;
}

static void rtc2_set_val(uint8_t field, uint8_t val){
  rtc2_write(field, rtc2_store_field(field, val));
     80e:	8d ec       	ldi	r24, 0xCD	; 205
     810:	98 9f       	mul	r25, r24
     812:	81 2d       	mov	r24, r1
     814:	11 24       	eor	r1, r1
     816:	86 95       	lsr	r24
     818:	86 95       	lsr	r24
     81a:	86 95       	lsr	r24
     81c:	f0 e1       	ldi	r31, 0x10	; 16
     81e:	8f 9f       	mul	r24, r31
     820:	b0 01       	movw	r22, r0
     822:	11 24       	eor	r1, r1
     824:	60 73       	andi	r22, 0x30	; 48
     826:	88 0f       	add	r24, r24
     828:	28 2f       	mov	r18, r24
     82a:	22 0f       	add	r18, r18
     82c:	22 0f       	add	r18, r18
     82e:	82 0f       	add	r24, r18
     830:	98 1b       	sub	r25, r24
     832:	69 2b       	or	r22, r25
     834:	86 e8       	ldi	r24, 0x86	; 134
     836:	0e 94 d6 02 	call	0x5ac	; 0x5ac <rtc2_write>
      rtc2_set_val(RTC2_HOURS_WRITE, (ptr->format | ptr->hours));

    if(fields & RTC2_DATE_FIELD)
      rtc2_set_val(RTC2_DATE_WRITE, ptr->date);

    if(fields & RTC2_MONTH_FIELD)
     83a:	c4 ff       	sbrs	r28, 4
     83c:	18 c0       	rjmp	.+48     	; 0x86e <rtc2_set+0x25e>
      rtc2_set_val(RTC2_MONTH_WRITE, ptr->month);
     83e:	f8 01       	movw	r30, r16
     840:	95 81       	ldd	r25, Z+5	; 0x05

  return val;
}

static void rtc2_set_val(uint8_t field, uint8_t val){
  rtc2_write(field, rtc2_store_field(field, val));
     842:	8d ec       	ldi	r24, 0xCD	; 205
     844:	98 9f       	mul	r25, r24
     846:	81 2d       	mov	r24, r1
     848:	11 24       	eor	r1, r1
     84a:	86 95       	lsr	r24
     84c:	86 95       	lsr	r24
     84e:	86 95       	lsr	r24
     850:	f0 e1       	ldi	r31, 0x10	; 16
     852:	8f 9f       	mul	r24, r31
     854:	b0 01       	movw	r22, r0
     856:	11 24       	eor	r1, r1
     858:	60 71       	andi	r22, 0x10	; 16
     85a:	88 0f       	add	r24, r24
     85c:	28 2f       	mov	r18, r24
     85e:	22 0f       	add	r18, r18
     860:	22 0f       	add	r18, r18
     862:	82 0f       	add	r24, r18
     864:	98 1b       	sub	r25, r24
     866:	69 2b       	or	r22, r25
     868:	88 e8       	ldi	r24, 0x88	; 136
     86a:	0e 94 d6 02 	call	0x5ac	; 0x5ac <rtc2_write>
      rtc2_set_val(RTC2_DATE_WRITE, ptr->date);

    if(fields & RTC2_MONTH_FIELD)
      rtc2_set_val(RTC2_MONTH_WRITE, ptr->month);

    if(fields & RTC2_WDAY_FIELD)
     86e:	c5 ff       	sbrs	r28, 5
     870:	06 c0       	rjmp	.+12     	; 0x87e <rtc2_set+0x26e>

  return val;
}

static void rtc2_set_val(uint8_t field, uint8_t val){
  rtc2_write(field, rtc2_store_field(field, val));
     872:	f8 01       	movw	r30, r16
     874:	63 81       	ldd	r22, Z+3	; 0x03
     876:	63 70       	andi	r22, 0x03	; 3
     878:	8a e8       	ldi	r24, 0x8A	; 138
     87a:	0e 94 d6 02 	call	0x5ac	; 0x5ac <rtc2_write>
      rtc2_set_val(RTC2_MONTH_WRITE, ptr->month);

    if(fields & RTC2_WDAY_FIELD)
      rtc2_set_val(RTC2_WDAY_WRITE, ptr->wday);

    if(fields & RTC2_YEAR_FIELD)
     87e:	c6 ff       	sbrs	r28, 6
     880:	17 c0       	rjmp	.+46     	; 0x8b0 <rtc2_set+0x2a0>
      rtc2_set_val(RTC2_YEAR_WRITE, ptr->year);
     882:	f8 01       	movw	r30, r16
     884:	96 81       	ldd	r25, Z+6	; 0x06

  return val;
}

static void rtc2_set_val(uint8_t field, uint8_t val){
  rtc2_write(field, rtc2_store_field(field, val));
     886:	8d ec       	ldi	r24, 0xCD	; 205
     888:	98 9f       	mul	r25, r24
     88a:	81 2d       	mov	r24, r1
     88c:	11 24       	eor	r1, r1
     88e:	86 95       	lsr	r24
     890:	86 95       	lsr	r24
     892:	86 95       	lsr	r24
     894:	f0 e1       	ldi	r31, 0x10	; 16
     896:	8f 9f       	mul	r24, r31
     898:	b0 01       	movw	r22, r0
     89a:	11 24       	eor	r1, r1
     89c:	88 0f       	add	r24, r24
     89e:	28 2f       	mov	r18, r24
     8a0:	22 0f       	add	r18, r18
     8a2:	22 0f       	add	r18, r18
     8a4:	82 0f       	add	r24, r18
     8a6:	98 1b       	sub	r25, r24
     8a8:	69 2b       	or	r22, r25
     8aa:	8c e8       	ldi	r24, 0x8C	; 140
     8ac:	0e 94 d6 02 	call	0x5ac	; 0x5ac <rtc2_write>
    if(fields & RTC2_YEAR_FIELD)
      rtc2_set_val(RTC2_YEAR_WRITE, ptr->year);
#if RTC2_BURST
  }
#endif
}
     8b0:	cf 91       	pop	r28
     8b2:	1f 91       	pop	r17
     8b4:	0f 91       	pop	r16
     8b6:	08 95       	ret

000008b8 <rtc2_preset>:

// Writing (presetting clock stuff) {{{
#if RTC2_WRITE

void rtc2_preset(rtc2_datetime ptr){
  rtc2_set(ptr, RTC2_ALL_FIELDS);
     8b8:	6f e7       	ldi	r22, 0x7F	; 127
     8ba:	0e 94 08 03 	call	0x610	; 0x610 <rtc2_set>
     8be:	08 95       	ret

000008c0 <rtc2_get>:

static uint8_t rtc2_get_val(uint8_t field){
  return rtc2_parse_val(field, rtc2_read(field));
}

void rtc2_get(rtc2_datetime ptr, uint8_t fields){
     8c0:	0f 93       	push	r16
     8c2:	1f 93       	push	r17
     8c4:	cf 93       	push	r28
     8c6:	8c 01       	movw	r16, r24
     8c8:	c6 2f       	mov	r28, r22
#if RTC2_BURST
  if(fields & RTC2_ALL_FIELDS){
     8ca:	86 2f       	mov	r24, r22
     8cc:	8f 77       	andi	r24, 0x7F	; 127
     8ce:	09 f4       	brne	.+2      	; 0x8d2 <rtc2_get+0x12>
     8d0:	6c c0       	rjmp	.+216    	; 0x9aa <__stack+0xab>
}
// }}}

// Utility stuff used to reset current transfer state {{{
static inline void rtc2_reset(void){
  RTC2_STOP_TRANSMISSION;
     8d2:	43 98       	cbi	0x08, 3	; 8
     8d4:	45 98       	cbi	0x08, 5	; 8
  RTC2_CE_HIGH;
     8d6:	43 9a       	sbi	0x08, 3	; 8
void rtc2_get(rtc2_datetime ptr, uint8_t fields){
#if RTC2_BURST
  if(fields & RTC2_ALL_FIELDS){
    uint8_t tmp;

    RTC2_START_TRANSMISSION(RTC2_BURST_READ);
     8d8:	8f eb       	ldi	r24, 0xBF	; 191
     8da:	0e 94 c7 02 	call	0x58e	; 0x58e <rtc2_write_byte>

    ptr->seconds = rtc2_parse_val(RTC2_SECONDS_READ, rtc2_read_byte());
     8de:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <rtc2_read_byte>
     8e2:	98 2f       	mov	r25, r24
     8e4:	90 77       	andi	r25, 0x70	; 112
     8e6:	96 95       	lsr	r25
     8e8:	96 95       	lsr	r25
     8ea:	96 95       	lsr	r25
     8ec:	29 2f       	mov	r18, r25
     8ee:	22 0f       	add	r18, r18
     8f0:	22 0f       	add	r18, r18
     8f2:	92 0f       	add	r25, r18
     8f4:	8f 70       	andi	r24, 0x0F	; 15
     8f6:	89 0f       	add	r24, r25
     8f8:	f8 01       	movw	r30, r16
     8fa:	80 83       	st	Z, r24
    ptr->minutes = rtc2_parse_val(RTC2_MINUTES_READ, rtc2_read_byte());
     8fc:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <rtc2_read_byte>
     900:	98 2f       	mov	r25, r24
     902:	90 77       	andi	r25, 0x70	; 112
     904:	96 95       	lsr	r25
     906:	96 95       	lsr	r25
     908:	96 95       	lsr	r25
     90a:	29 2f       	mov	r18, r25
     90c:	22 0f       	add	r18, r18
     90e:	22 0f       	add	r18, r18
     910:	92 0f       	add	r25, r18
     912:	8f 70       	andi	r24, 0x0F	; 15
     914:	89 0f       	add	r24, r25
     916:	f8 01       	movw	r30, r16
     918:	82 83       	std	Z+2, r24	; 0x02

    // hours format is passed along with the hour itself
    tmp          = rtc2_parse_val(RTC2_HOURS_READ, rtc2_read_byte());
     91a:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <rtc2_read_byte>
    case RTC2_MINUTES_READ:
      val = (val & 0x0F) + ((val & 0x70) >> 4) * 10;
      break;
    case RTC2_HOURS_READ:
      // hours format is passed along with the hour itself
      val = (val & RTC2_FORMAT_PM) | ((val & 0x0F) + ((val & 0x10) >> 4) * 10);
     91e:	84 fb       	bst	r24, 4
     920:	99 27       	eor	r25, r25
     922:	90 f9       	bld	r25, 0
     924:	99 0f       	add	r25, r25
     926:	29 2f       	mov	r18, r25
     928:	22 0f       	add	r18, r18
     92a:	22 0f       	add	r18, r18
     92c:	92 0f       	add	r25, r18
     92e:	28 2f       	mov	r18, r24
     930:	2f 70       	andi	r18, 0x0F	; 15
     932:	92 0f       	add	r25, r18
     934:	80 7a       	andi	r24, 0xA0	; 160
     936:	89 2b       	or	r24, r25
    ptr->seconds = rtc2_parse_val(RTC2_SECONDS_READ, rtc2_read_byte());
    ptr->minutes = rtc2_parse_val(RTC2_MINUTES_READ, rtc2_read_byte());

    // hours format is passed along with the hour itself
    tmp          = rtc2_parse_val(RTC2_HOURS_READ, rtc2_read_byte());
    ptr->format  = tmp & RTC2_FORMAT_PM;
     938:	98 2f       	mov	r25, r24
     93a:	90 7a       	andi	r25, 0xA0	; 160
     93c:	f8 01       	movw	r30, r16
     93e:	97 83       	std	Z+7, r25	; 0x07
    ptr->hours   = tmp & ~RTC2_FORMAT_PM;
     940:	8f 75       	andi	r24, 0x5F	; 95
     942:	81 83       	std	Z+1, r24	; 0x01

    ptr->date    = rtc2_parse_val(RTC2_DATE_READ, rtc2_read_byte());
     944:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <rtc2_read_byte>
     948:	98 2f       	mov	r25, r24
     94a:	90 73       	andi	r25, 0x30	; 48
     94c:	96 95       	lsr	r25
     94e:	96 95       	lsr	r25
     950:	96 95       	lsr	r25
     952:	29 2f       	mov	r18, r25
     954:	22 0f       	add	r18, r18
     956:	22 0f       	add	r18, r18
     958:	92 0f       	add	r25, r18
     95a:	8f 70       	andi	r24, 0x0F	; 15
     95c:	89 0f       	add	r24, r25
     95e:	f8 01       	movw	r30, r16
     960:	84 83       	std	Z+4, r24	; 0x04
    ptr->month   = rtc2_parse_val(RTC2_MONTH_READ, rtc2_read_byte());
     962:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <rtc2_read_byte>
     966:	84 fb       	bst	r24, 4
     968:	99 27       	eor	r25, r25
     96a:	90 f9       	bld	r25, 0
     96c:	99 0f       	add	r25, r25
     96e:	29 2f       	mov	r18, r25
     970:	22 0f       	add	r18, r18
     972:	22 0f       	add	r18, r18
     974:	92 0f       	add	r25, r18
     976:	8f 70       	andi	r24, 0x0F	; 15
     978:	89 0f       	add	r24, r25
     97a:	f8 01       	movw	r30, r16
     97c:	85 83       	std	Z+5, r24	; 0x05
    ptr->wday    = rtc2_parse_val(RTC2_WDAY_READ, rtc2_read_byte());
     97e:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <rtc2_read_byte>
     982:	87 70       	andi	r24, 0x07	; 7
     984:	f8 01       	movw	r30, r16
     986:	83 83       	std	Z+3, r24	; 0x03
    ptr->year    = rtc2_parse_val(RTC2_YEAR_READ, rtc2_read_byte());
     988:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <rtc2_read_byte>
     98c:	98 2f       	mov	r25, r24
     98e:	92 95       	swap	r25
     990:	9f 70       	andi	r25, 0x0F	; 15
     992:	99 0f       	add	r25, r25
     994:	29 2f       	mov	r18, r25
     996:	22 0f       	add	r18, r18
     998:	22 0f       	add	r18, r18
     99a:	92 0f       	add	r25, r18
     99c:	8f 70       	andi	r24, 0x0F	; 15
     99e:	89 0f       	add	r24, r25
     9a0:	f8 01       	movw	r30, r16
     9a2:	86 83       	std	Z+6, r24	; 0x06

    RTC2_STOP_TRANSMISSION;
     9a4:	43 98       	cbi	0x08, 3	; 8
     9a6:	45 98       	cbi	0x08, 5	; 8
     9a8:	78 c0       	rjmp	.+240    	; 0xa9a <__stack+0x19b>
  }else{
#endif
    if(fields & RTC2_SECONDS_FIELD)
     9aa:	60 ff       	sbrs	r22, 0
     9ac:	10 c0       	rjmp	.+32     	; 0x9ce <__stack+0xcf>

  return val;
}

static uint8_t rtc2_get_val(uint8_t field){
  return rtc2_parse_val(field, rtc2_read(field));
     9ae:	81 e8       	ldi	r24, 0x81	; 129
     9b0:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <rtc2_read>

    RTC2_STOP_TRANSMISSION;
  }else{
#endif
    if(fields & RTC2_SECONDS_FIELD)
      ptr->seconds = rtc2_get_val(RTC2_SECONDS_READ);
     9b4:	98 2f       	mov	r25, r24
     9b6:	90 77       	andi	r25, 0x70	; 112
     9b8:	96 95       	lsr	r25
     9ba:	96 95       	lsr	r25
     9bc:	96 95       	lsr	r25
     9be:	29 2f       	mov	r18, r25
     9c0:	22 0f       	add	r18, r18
     9c2:	22 0f       	add	r18, r18
     9c4:	92 0f       	add	r25, r18
     9c6:	8f 70       	andi	r24, 0x0F	; 15
     9c8:	89 0f       	add	r24, r25
     9ca:	f8 01       	movw	r30, r16
     9cc:	80 83       	st	Z, r24

    if(fields & RTC2_MINUTES_FIELD)
     9ce:	c1 ff       	sbrs	r28, 1
     9d0:	10 c0       	rjmp	.+32     	; 0x9f2 <__stack+0xf3>

  return val;
}

static uint8_t rtc2_get_val(uint8_t field){
  return rtc2_parse_val(field, rtc2_read(field));
     9d2:	83 e8       	ldi	r24, 0x83	; 131
     9d4:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <rtc2_read>
#endif
    if(fields & RTC2_SECONDS_FIELD)
      ptr->seconds = rtc2_get_val(RTC2_SECONDS_READ);

    if(fields & RTC2_MINUTES_FIELD)
      ptr->minutes = rtc2_get_val(RTC2_MINUTES_READ);
     9d8:	98 2f       	mov	r25, r24
     9da:	90 77       	andi	r25, 0x70	; 112
     9dc:	96 95       	lsr	r25
     9de:	96 95       	lsr	r25
     9e0:	96 95       	lsr	r25
     9e2:	29 2f       	mov	r18, r25
     9e4:	22 0f       	add	r18, r18
     9e6:	22 0f       	add	r18, r18
     9e8:	92 0f       	add	r25, r18
     9ea:	8f 70       	andi	r24, 0x0F	; 15
     9ec:	89 0f       	add	r24, r25
     9ee:	f8 01       	movw	r30, r16
     9f0:	82 83       	std	Z+2, r24	; 0x02

    if(fields & RTC2_HOURS_FIELD){
     9f2:	c2 ff       	sbrs	r28, 2
     9f4:	16 c0       	rjmp	.+44     	; 0xa22 <__stack+0x123>

  return val;
}

static uint8_t rtc2_get_val(uint8_t field){
  return rtc2_parse_val(field, rtc2_read(field));
     9f6:	85 e8       	ldi	r24, 0x85	; 133
     9f8:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <rtc2_read>
    case RTC2_MINUTES_READ:
      val = (val & 0x0F) + ((val & 0x70) >> 4) * 10;
      break;
    case RTC2_HOURS_READ:
      // hours format is passed along with the hour itself
      val = (val & RTC2_FORMAT_PM) | ((val & 0x0F) + ((val & 0x10) >> 4) * 10);
     9fc:	84 fb       	bst	r24, 4
     9fe:	99 27       	eor	r25, r25
     a00:	90 f9       	bld	r25, 0
     a02:	99 0f       	add	r25, r25
     a04:	29 2f       	mov	r18, r25
     a06:	22 0f       	add	r18, r18
     a08:	22 0f       	add	r18, r18
     a0a:	92 0f       	add	r25, r18
     a0c:	28 2f       	mov	r18, r24
     a0e:	2f 70       	andi	r18, 0x0F	; 15
     a10:	92 0f       	add	r25, r18
     a12:	80 7a       	andi	r24, 0xA0	; 160
     a14:	89 2b       	or	r24, r25
    if(fields & RTC2_MINUTES_FIELD)
      ptr->minutes = rtc2_get_val(RTC2_MINUTES_READ);

    if(fields & RTC2_HOURS_FIELD){
      uint8_t tmp = rtc2_get_val(RTC2_HOURS_READ);
      ptr->format = tmp & RTC2_FORMAT_PM;
     a16:	98 2f       	mov	r25, r24
     a18:	90 7a       	andi	r25, 0xA0	; 160
     a1a:	f8 01       	movw	r30, r16
     a1c:	97 83       	std	Z+7, r25	; 0x07
      ptr->hours = tmp & ~RTC2_FORMAT_PM;
     a1e:	8f 75       	andi	r24, 0x5F	; 95
     a20:	81 83       	std	Z+1, r24	; 0x01
    }

    if(fields & RTC2_DATE_FIELD)
     a22:	c3 ff       	sbrs	r28, 3
     a24:	10 c0       	rjmp	.+32     	; 0xa46 <__stack+0x147>

  return val;
}

static uint8_t rtc2_get_val(uint8_t field){
  return rtc2_parse_val(field, rtc2_read(field));
     a26:	87 e8       	ldi	r24, 0x87	; 135
     a28:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <rtc2_read>
      ptr->format = tmp & RTC2_FORMAT_PM;
      ptr->hours = tmp & ~RTC2_FORMAT_PM;
    }

    if(fields & RTC2_DATE_FIELD)
      ptr->date = rtc2_get_val(RTC2_DATE_READ);
     a2c:	98 2f       	mov	r25, r24
     a2e:	90 73       	andi	r25, 0x30	; 48
     a30:	96 95       	lsr	r25
     a32:	96 95       	lsr	r25
     a34:	96 95       	lsr	r25
     a36:	29 2f       	mov	r18, r25
     a38:	22 0f       	add	r18, r18
     a3a:	22 0f       	add	r18, r18
     a3c:	92 0f       	add	r25, r18
     a3e:	8f 70       	andi	r24, 0x0F	; 15
     a40:	89 0f       	add	r24, r25
     a42:	f8 01       	movw	r30, r16
     a44:	84 83       	std	Z+4, r24	; 0x04

    if(fields & RTC2_MONTH_FIELD)
     a46:	c4 ff       	sbrs	r28, 4
     a48:	0f c0       	rjmp	.+30     	; 0xa68 <__stack+0x169>

  return val;
}

static uint8_t rtc2_get_val(uint8_t field){
  return rtc2_parse_val(field, rtc2_read(field));
     a4a:	89 e8       	ldi	r24, 0x89	; 137
     a4c:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <rtc2_read>

    if(fields & RTC2_DATE_FIELD)
      ptr->date = rtc2_get_val(RTC2_DATE_READ);

    if(fields & RTC2_MONTH_FIELD)
      ptr->month = rtc2_get_val(RTC2_MONTH_READ);
     a50:	84 fb       	bst	r24, 4
     a52:	99 27       	eor	r25, r25
     a54:	90 f9       	bld	r25, 0
     a56:	99 0f       	add	r25, r25
     a58:	29 2f       	mov	r18, r25
     a5a:	22 0f       	add	r18, r18
     a5c:	22 0f       	add	r18, r18
     a5e:	92 0f       	add	r25, r18
     a60:	8f 70       	andi	r24, 0x0F	; 15
     a62:	89 0f       	add	r24, r25
     a64:	f8 01       	movw	r30, r16
     a66:	85 83       	std	Z+5, r24	; 0x05

    if(fields & RTC2_WDAY_FIELD)
     a68:	c5 ff       	sbrs	r28, 5
     a6a:	06 c0       	rjmp	.+12     	; 0xa78 <__stack+0x179>

  return val;
}

static uint8_t rtc2_get_val(uint8_t field){
  return rtc2_parse_val(field, rtc2_read(field));
     a6c:	8b e8       	ldi	r24, 0x8B	; 139
     a6e:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <rtc2_read>

    if(fields & RTC2_MONTH_FIELD)
      ptr->month = rtc2_get_val(RTC2_MONTH_READ);

    if(fields & RTC2_WDAY_FIELD)
      ptr->wday = rtc2_get_val(RTC2_WDAY_READ);
     a72:	87 70       	andi	r24, 0x07	; 7
     a74:	f8 01       	movw	r30, r16
     a76:	83 83       	std	Z+3, r24	; 0x03

    if(fields & RTC2_YEAR_FIELD)
     a78:	c6 ff       	sbrs	r28, 6
     a7a:	0f c0       	rjmp	.+30     	; 0xa9a <__stack+0x19b>

  return val;
}

static uint8_t rtc2_get_val(uint8_t field){
  return rtc2_parse_val(field, rtc2_read(field));
     a7c:	8d e8       	ldi	r24, 0x8D	; 141
     a7e:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <rtc2_read>

    if(fields & RTC2_WDAY_FIELD)
      ptr->wday = rtc2_get_val(RTC2_WDAY_READ);

    if(fields & RTC2_YEAR_FIELD)
      ptr->year = rtc2_get_val(RTC2_YEAR_READ);
     a82:	98 2f       	mov	r25, r24
     a84:	92 95       	swap	r25
     a86:	9f 70       	andi	r25, 0x0F	; 15
     a88:	99 0f       	add	r25, r25
     a8a:	29 2f       	mov	r18, r25
     a8c:	22 0f       	add	r18, r18
     a8e:	22 0f       	add	r18, r18
     a90:	92 0f       	add	r25, r18
     a92:	8f 70       	andi	r24, 0x0F	; 15
     a94:	89 0f       	add	r24, r25
     a96:	f8 01       	movw	r30, r16
     a98:	86 83       	std	Z+6, r24	; 0x06
#if RTC2_BURST
  }
#endif
}
     a9a:	cf 91       	pop	r28
     a9c:	1f 91       	pop	r17
     a9e:	0f 91       	pop	r16
     aa0:	08 95       	ret

00000aa2 <rtc2_update>:

// High level decoding and reading (updating) functions {{{
#if RTC2_READ

void rtc2_update(rtc2_datetime ptr){
  rtc2_get(ptr, RTC2_ALL_FIELDS);
     aa2:	6f e7       	ldi	r22, 0x7F	; 127
     aa4:	0e 94 60 04 	call	0x8c0	; 0x8c0 <rtc2_get>
     aa8:	08 95       	ret

00000aaa <drawImage>:
	nokia_lcd_clear();
	_delay_ms(100);
	}
}

void drawImage(const unsigned char img[504]){
     aaa:	cf 92       	push	r12
     aac:	df 92       	push	r13
     aae:	ef 92       	push	r14
     ab0:	ff 92       	push	r15
     ab2:	0f 93       	push	r16
     ab4:	1f 93       	push	r17
     ab6:	cf 93       	push	r28
     ab8:	df 93       	push	r29
     aba:	6c 01       	movw	r12, r24
     abc:	00 e0       	ldi	r16, 0x00	; 0
     abe:	55 c0       	rjmp	.+170    	; 0xb6a <drawImage+0xc0>
     ac0:	e7 01       	movw	r28, r14
	int y = 0;
	int i = 0; 
	int counter = 0;
	while(y != 48){ // these numbers are limited here because it is a 48 x 84 lcd screen
		while(i <= 79){
			if(img[counter] & 0x80){nokia_lcd_set_pixel(i, y, 1); i++;}
     ac2:	88 81       	ld	r24, Y
     ac4:	88 23       	and	r24, r24
     ac6:	2c f4       	brge	.+10     	; 0xad2 <drawImage+0x28>
     ac8:	41 e0       	ldi	r20, 0x01	; 1
     aca:	60 2f       	mov	r22, r16
     acc:	81 2f       	mov	r24, r17
     ace:	0e 94 bc 01 	call	0x378	; 0x378 <nokia_lcd_set_pixel>
			else {i++;}
			if(img[counter] & 0x40){nokia_lcd_set_pixel(i, y, 1); i++;}
     ad2:	88 81       	ld	r24, Y
     ad4:	86 ff       	sbrs	r24, 6
     ad6:	06 c0       	rjmp	.+12     	; 0xae4 <drawImage+0x3a>
     ad8:	41 e0       	ldi	r20, 0x01	; 1
     ada:	60 2f       	mov	r22, r16
     adc:	81 e0       	ldi	r24, 0x01	; 1
     ade:	81 0f       	add	r24, r17
     ae0:	0e 94 bc 01 	call	0x378	; 0x378 <nokia_lcd_set_pixel>
			else {i++;}
			if(img[counter] & 0x20){nokia_lcd_set_pixel(i, y, 1); i++;}
     ae4:	88 81       	ld	r24, Y
     ae6:	85 ff       	sbrs	r24, 5
     ae8:	06 c0       	rjmp	.+12     	; 0xaf6 <drawImage+0x4c>
     aea:	41 e0       	ldi	r20, 0x01	; 1
     aec:	60 2f       	mov	r22, r16
     aee:	82 e0       	ldi	r24, 0x02	; 2
     af0:	81 0f       	add	r24, r17
     af2:	0e 94 bc 01 	call	0x378	; 0x378 <nokia_lcd_set_pixel>
			else {i++;}
			if(img[counter] & 0x10){nokia_lcd_set_pixel(i, y, 1); i++;}
     af6:	88 81       	ld	r24, Y
     af8:	84 ff       	sbrs	r24, 4
     afa:	06 c0       	rjmp	.+12     	; 0xb08 <drawImage+0x5e>
     afc:	41 e0       	ldi	r20, 0x01	; 1
     afe:	60 2f       	mov	r22, r16
     b00:	83 e0       	ldi	r24, 0x03	; 3
     b02:	81 0f       	add	r24, r17
     b04:	0e 94 bc 01 	call	0x378	; 0x378 <nokia_lcd_set_pixel>
			else {i++;}
			if(img[counter] & 0x08){nokia_lcd_set_pixel(i, y, 1); i++;}
     b08:	88 81       	ld	r24, Y
     b0a:	83 ff       	sbrs	r24, 3
     b0c:	06 c0       	rjmp	.+12     	; 0xb1a <drawImage+0x70>
     b0e:	41 e0       	ldi	r20, 0x01	; 1
     b10:	60 2f       	mov	r22, r16
     b12:	84 e0       	ldi	r24, 0x04	; 4
     b14:	81 0f       	add	r24, r17
     b16:	0e 94 bc 01 	call	0x378	; 0x378 <nokia_lcd_set_pixel>
			else {i++;}
			if(img[counter] & 0x04){nokia_lcd_set_pixel(i, y, 1); i++;}
     b1a:	88 81       	ld	r24, Y
     b1c:	82 ff       	sbrs	r24, 2
     b1e:	06 c0       	rjmp	.+12     	; 0xb2c <drawImage+0x82>
     b20:	41 e0       	ldi	r20, 0x01	; 1
     b22:	60 2f       	mov	r22, r16
     b24:	85 e0       	ldi	r24, 0x05	; 5
     b26:	81 0f       	add	r24, r17
     b28:	0e 94 bc 01 	call	0x378	; 0x378 <nokia_lcd_set_pixel>
			else {i++;}
			if(img[counter] & 0x02){nokia_lcd_set_pixel(i, y, 1); i++;}
     b2c:	88 81       	ld	r24, Y
     b2e:	81 ff       	sbrs	r24, 1
     b30:	06 c0       	rjmp	.+12     	; 0xb3e <drawImage+0x94>
     b32:	41 e0       	ldi	r20, 0x01	; 1
     b34:	60 2f       	mov	r22, r16
     b36:	86 e0       	ldi	r24, 0x06	; 6
     b38:	81 0f       	add	r24, r17
     b3a:	0e 94 bc 01 	call	0x378	; 0x378 <nokia_lcd_set_pixel>
			else {i++;}
			if(img[counter] & 0x01){nokia_lcd_set_pixel(i, y, 1); i++;}
     b3e:	88 81       	ld	r24, Y
     b40:	80 ff       	sbrs	r24, 0
     b42:	06 c0       	rjmp	.+12     	; 0xb50 <drawImage+0xa6>
     b44:	41 e0       	ldi	r20, 0x01	; 1
     b46:	60 2f       	mov	r22, r16
     b48:	87 e0       	ldi	r24, 0x07	; 7
     b4a:	81 0f       	add	r24, r17
     b4c:	0e 94 bc 01 	call	0x378	; 0x378 <nokia_lcd_set_pixel>
     b50:	8f ef       	ldi	r24, 0xFF	; 255
     b52:	e8 1a       	sub	r14, r24
     b54:	f8 0a       	sbc	r15, r24
     b56:	18 5f       	subi	r17, 0xF8	; 248
void drawImage(const unsigned char img[504]){
	int y = 0;
	int i = 0; 
	int counter = 0;
	while(y != 48){ // these numbers are limited here because it is a 48 x 84 lcd screen
		while(i <= 79){
     b58:	10 35       	cpi	r17, 0x50	; 80
     b5a:	09 f0       	breq	.+2      	; 0xb5e <drawImage+0xb4>
     b5c:	b1 cf       	rjmp	.-158    	; 0xac0 <drawImage+0x16>
     b5e:	0f 5f       	subi	r16, 0xFF	; 255
     b60:	ea e0       	ldi	r30, 0x0A	; 10
     b62:	ce 0e       	add	r12, r30
     b64:	d1 1c       	adc	r13, r1

void drawImage(const unsigned char img[504]){
	int y = 0;
	int i = 0; 
	int counter = 0;
	while(y != 48){ // these numbers are limited here because it is a 48 x 84 lcd screen
     b66:	00 33       	cpi	r16, 0x30	; 48
     b68:	19 f0       	breq	.+6      	; 0xb70 <drawImage+0xc6>
	nokia_lcd_clear();
	_delay_ms(100);
	}
}

void drawImage(const unsigned char img[504]){
     b6a:	76 01       	movw	r14, r12
     b6c:	10 e0       	ldi	r17, 0x00	; 0
     b6e:	a8 cf       	rjmp	.-176    	; 0xac0 <drawImage+0x16>
		
		i = 0;
		y++; // now we move onto the next row

	}
}
     b70:	df 91       	pop	r29
     b72:	cf 91       	pop	r28
     b74:	1f 91       	pop	r17
     b76:	0f 91       	pop	r16
     b78:	ff 90       	pop	r15
     b7a:	ef 90       	pop	r14
     b7c:	df 90       	pop	r13
     b7e:	cf 90       	pop	r12
     b80:	08 95       	ret

00000b82 <read_dht11_dat>:
int read_dht11_dat()
{
     b82:	27 e0       	ldi	r18, 0x07	; 7
     b84:	30 e0       	ldi	r19, 0x00	; 0
	int i = 0;
	int result=0;
     b86:	80 e0       	ldi	r24, 0x00	; 0
     b88:	90 e0       	ldi	r25, 0x00	; 0
	{
		while(!(PINC & _BV(DHT11_PIN)));
		_delay_us(30); // wait  forever until anlog input port 0 is '1'   (NOTICE: PINC reads all the analog input ports
		//and  _BV(X) is the macro operation which pull up positon 'X'to '1' and the rest positions to '0'. it is equivalent to 1<    delayMicroseconds(30);
		if(PINC & _BV(DHT11_PIN))  //if analog input port 0 is still '1' after 30 us
		result |=(1<<(7-i));     //this position is 1
     b8a:	61 e0       	ldi	r22, 0x01	; 1
     b8c:	70 e0       	ldi	r23, 0x00	; 0
{
	int i = 0;
	int result=0;
	for(i=0; i< 8; i++)
	{
		while(!(PINC & _BV(DHT11_PIN)));
     b8e:	30 9b       	sbis	0x06, 0	; 6
     b90:	fe cf       	rjmp	.-4      	; 0xb8e <read_dht11_dat+0xc>
     b92:	40 e5       	ldi	r20, 0x50	; 80
     b94:	4a 95       	dec	r20
     b96:	f1 f7       	brne	.-4      	; 0xb94 <read_dht11_dat+0x12>
		_delay_us(30); // wait  forever until anlog input port 0 is '1'   (NOTICE: PINC reads all the analog input ports
		//and  _BV(X) is the macro operation which pull up positon 'X'to '1' and the rest positions to '0'. it is equivalent to 1<    delayMicroseconds(30);
		if(PINC & _BV(DHT11_PIN))  //if analog input port 0 is still '1' after 30 us
     b98:	30 9b       	sbis	0x06, 0	; 6
     b9a:	09 c0       	rjmp	.+18     	; 0xbae <read_dht11_dat+0x2c>
		result |=(1<<(7-i));     //this position is 1
     b9c:	ab 01       	movw	r20, r22
     b9e:	02 2e       	mov	r0, r18
     ba0:	02 c0       	rjmp	.+4      	; 0xba6 <read_dht11_dat+0x24>
     ba2:	44 0f       	add	r20, r20
     ba4:	55 1f       	adc	r21, r21
     ba6:	0a 94       	dec	r0
     ba8:	e2 f7       	brpl	.-8      	; 0xba2 <read_dht11_dat+0x20>
     baa:	84 2b       	or	r24, r20
     bac:	95 2b       	or	r25, r21
		while((PINC & _BV(DHT11_PIN)));  // wait '1' finish
     bae:	30 99       	sbic	0x06, 0	; 6
     bb0:	fe cf       	rjmp	.-4      	; 0xbae <read_dht11_dat+0x2c>
     bb2:	21 50       	subi	r18, 0x01	; 1
     bb4:	31 09       	sbc	r19, r1
     bb6:	58 f7       	brcc	.-42     	; 0xb8e <read_dht11_dat+0xc>
	}
	return result;
}
     bb8:	08 95       	ret

00000bba <temp_setup>:

void temp_setup()
{
	DDRC |= _BV(DHT11_PIN);   //let analog port 0 be output port
     bba:	38 9a       	sbi	0x07, 0	; 7
	PORTC |= _BV(DHT11_PIN);  //let the initial value of this port be '1'
     bbc:	40 9a       	sbi	0x08, 0	; 8
     bbe:	08 95       	ret

00000bc0 <main>:




int main(void)
{
     bc0:	cf 93       	push	r28
     bc2:	df 93       	push	r29
     bc4:	cd b7       	in	r28, 0x3d	; 61
     bc6:	de b7       	in	r29, 0x3e	; 62
     bc8:	64 97       	sbiw	r28, 0x14	; 20
     bca:	0f b6       	in	r0, 0x3f	; 63
     bcc:	f8 94       	cli
     bce:	de bf       	out	0x3e, r29	; 62
     bd0:	0f be       	out	0x3f, r0	; 63
     bd2:	cd bf       	out	0x3d, r28	; 61
	char PinTracker; // used later on to keep track of pins so we dont turn anything on or off
	nokia_lcd_init(); // start up the lcd
     bd4:	0e 94 65 01 	call	0x2ca	; 0x2ca <nokia_lcd_init>
	nokia_lcd_clear(); // clear the lcd
     bd8:	0e 94 a9 01 	call	0x352	; 0x352 <nokia_lcd_clear>
	DDRD |= 0b10000011; // set the DDRD so the pins can be used for the buzzer and the 
     bdc:	8a b1       	in	r24, 0x0a	; 10
     bde:	83 68       	ori	r24, 0x83	; 131
     be0:	8a b9       	out	0x0a, r24	; 10
	char buf[10] = {0}; // buffer for writing characters to for itoa.
     be2:	fe 01       	movw	r30, r28
     be4:	31 96       	adiw	r30, 0x01	; 1
     be6:	8a e0       	ldi	r24, 0x0A	; 10
     be8:	df 01       	movw	r26, r30
     bea:	1d 92       	st	X+, r1
     bec:	8a 95       	dec	r24
     bee:	e9 f7       	brne	.-6      	; 0xbea <main+0x2a>
	char timeYear = 2017;
	char slash = 0x5C;   // this is here because I couldnt type / in text without it thinking I was talking about something 
						 // else and saying I was missing something so here it is in the hex code
	char alarmHours = 25; // it has to be at an area that is unreachable because its not initially set
	char alarmMinutes = 61;
	temp_setup(); // set up the temperature sensor
     bf0:	0e 94 dd 05 	call	0xbba	; 0xbba <temp_setup>
	int ttemper=0;
	int n=0;
	int dht11_dat[5]; // where the data is stored from reading from the sensor
	int dht11_in;
	int i;
	rtc2_init();
     bf4:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <rtc2_init>

	RTC2_VALUE->format = RTC2_FORMAT_24; // prompt the user to input the time.
     bf8:	e0 91 3c 05 	lds	r30, 0x053C	; 0x80053c <RTC2_VALUE>
     bfc:	f0 91 3d 05 	lds	r31, 0x053D	; 0x80053d <RTC2_VALUE+0x1>
     c00:	17 82       	std	Z+7, r1	; 0x07
	rtc2_preset(RTC2_VALUE);
     c02:	80 91 3c 05 	lds	r24, 0x053C	; 0x80053c <RTC2_VALUE>
     c06:	90 91 3d 05 	lds	r25, 0x053D	; 0x80053d <RTC2_VALUE+0x1>
     c0a:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <rtc2_preset>
	nokia_lcd_clear();
     c0e:	0e 94 a9 01 	call	0x352	; 0x352 <nokia_lcd_clear>
	nokia_lcd_set_cursor(10,20);
     c12:	64 e1       	ldi	r22, 0x14	; 20
     c14:	8a e0       	ldi	r24, 0x0A	; 10
     c16:	0e 94 a8 02 	call	0x550	; 0x550 <nokia_lcd_set_cursor>
	nokia_lcd_write_string("Please Enter",1);
     c1a:	61 e0       	ldi	r22, 0x01	; 1
     c1c:	80 e0       	ldi	r24, 0x00	; 0
     c1e:	91 e0       	ldi	r25, 0x01	; 1
     c20:	0e 94 95 02 	call	0x52a	; 0x52a <nokia_lcd_write_string>
	nokia_lcd_set_cursor(17,28);
     c24:	6c e1       	ldi	r22, 0x1C	; 28
     c26:	81 e1       	ldi	r24, 0x11	; 17
     c28:	0e 94 a8 02 	call	0x550	; 0x550 <nokia_lcd_set_cursor>
	nokia_lcd_write_string("The Time.",1);
     c2c:	61 e0       	ldi	r22, 0x01	; 1
     c2e:	8d e0       	ldi	r24, 0x0D	; 13
     c30:	91 e0       	ldi	r25, 0x01	; 1
     c32:	0e 94 95 02 	call	0x52a	; 0x52a <nokia_lcd_write_string>
	nokia_lcd_render();
     c36:	0e 94 ad 02 	call	0x55a	; 0x55a <nokia_lcd_render>
	nokia_lcd_clear();
     c3a:	0e 94 a9 01 	call	0x352	; 0x352 <nokia_lcd_clear>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c3e:	bf ef       	ldi	r27, 0xFF	; 255
     c40:	e3 ed       	ldi	r30, 0xD3	; 211
     c42:	f0 e3       	ldi	r31, 0x30	; 48
     c44:	b1 50       	subi	r27, 0x01	; 1
     c46:	e0 40       	sbci	r30, 0x00	; 0
     c48:	f0 40       	sbci	r31, 0x00	; 0
     c4a:	e1 f7       	brne	.-8      	; 0xc44 <main+0x84>
     c4c:	00 c0       	rjmp	.+0      	; 0xc4e <main+0x8e>
     c4e:	00 00       	nop
	DDRD |= 0b10000011; // set the DDRD so the pins can be used for the buzzer and the 
	char buf[10] = {0}; // buffer for writing characters to for itoa.
	char ButtonBTime = 0; // how long button B was held down
	char cursorPosition = 0; // where the user is when inputting code
	char timeMinutes = 0; // used for when the user inputs it in the next section
	char timeHours = 0;   
     c50:	10 e0       	ldi	r17, 0x00	; 0
	nokia_lcd_clear(); // clear the lcd
	DDRD |= 0b10000011; // set the DDRD so the pins can be used for the buzzer and the 
	char buf[10] = {0}; // buffer for writing characters to for itoa.
	char ButtonBTime = 0; // how long button B was held down
	char cursorPosition = 0; // where the user is when inputting code
	char timeMinutes = 0; // used for when the user inputs it in the next section
     c52:	00 e0       	ldi	r16, 0x00	; 0
	nokia_lcd_set_cursor(17,28);
	nokia_lcd_write_string("The Time.",1);
	nokia_lcd_render();
	nokia_lcd_clear();
	_delay_ms(2000);
	cursorPosition = 0;
     c54:	f1 2c       	mov	r15, r1
     c56:	04 c0       	rjmp	.+8      	; 0xc60 <main+0xa0>
	int Alarm;
	while(1){
			if(cursorPosition == 2){break;} // when the user is in position 2 that means that theyve entered both the hours and minutes and we can leave this otherwise infinite loop
     c58:	22 e0       	ldi	r18, 0x02	; 2
     c5a:	f2 16       	cp	r15, r18
     c5c:	09 f4       	brne	.+2      	; 0xc60 <main+0xa0>
     c5e:	8b c0       	rjmp	.+278    	; 0xd76 <main+0x1b6>
			if(cursorPosition == 0){ nokia_lcd_set_cursor(12,0); nokia_lcd_write_string("/",2);  nokia_lcd_set_cursor(20,0); nokia_lcd_write_char(slash,2);} // this is where I use slash
     c60:	f1 10       	cpse	r15, r1
     c62:	12 c0       	rjmp	.+36     	; 0xc88 <main+0xc8>
     c64:	60 e0       	ldi	r22, 0x00	; 0
     c66:	8c e0       	ldi	r24, 0x0C	; 12
     c68:	0e 94 a8 02 	call	0x550	; 0x550 <nokia_lcd_set_cursor>
     c6c:	62 e0       	ldi	r22, 0x02	; 2
     c6e:	87 e1       	ldi	r24, 0x17	; 23
     c70:	91 e0       	ldi	r25, 0x01	; 1
     c72:	0e 94 95 02 	call	0x52a	; 0x52a <nokia_lcd_write_string>
     c76:	60 e0       	ldi	r22, 0x00	; 0
     c78:	84 e1       	ldi	r24, 0x14	; 20
     c7a:	0e 94 a8 02 	call	0x550	; 0x550 <nokia_lcd_set_cursor>
     c7e:	62 e0       	ldi	r22, 0x02	; 2
     c80:	8c e5       	ldi	r24, 0x5C	; 92
     c82:	0e 94 e7 01 	call	0x3ce	; 0x3ce <nokia_lcd_write_char>
     c86:	14 c0       	rjmp	.+40     	; 0xcb0 <main+0xf0>
			if(cursorPosition == 1){ nokia_lcd_set_cursor(58,0); nokia_lcd_write_string("/",2);  nokia_lcd_set_cursor(66,0); nokia_lcd_write_char(slash,2);}
     c88:	81 e0       	ldi	r24, 0x01	; 1
     c8a:	f8 12       	cpse	r15, r24
     c8c:	11 c0       	rjmp	.+34     	; 0xcb0 <main+0xf0>
     c8e:	60 e0       	ldi	r22, 0x00	; 0
     c90:	8a e3       	ldi	r24, 0x3A	; 58
     c92:	0e 94 a8 02 	call	0x550	; 0x550 <nokia_lcd_set_cursor>
     c96:	62 e0       	ldi	r22, 0x02	; 2
     c98:	87 e1       	ldi	r24, 0x17	; 23
     c9a:	91 e0       	ldi	r25, 0x01	; 1
     c9c:	0e 94 95 02 	call	0x52a	; 0x52a <nokia_lcd_write_string>
     ca0:	60 e0       	ldi	r22, 0x00	; 0
     ca2:	82 e4       	ldi	r24, 0x42	; 66
     ca4:	0e 94 a8 02 	call	0x550	; 0x550 <nokia_lcd_set_cursor>
     ca8:	62 e0       	ldi	r22, 0x02	; 2
     caa:	8c e5       	ldi	r24, 0x5C	; 92
     cac:	0e 94 e7 01 	call	0x3ce	; 0x3ce <nokia_lcd_write_char>
			nokia_lcd_set_cursor(5,16);
     cb0:	60 e1       	ldi	r22, 0x10	; 16
     cb2:	85 e0       	ldi	r24, 0x05	; 5
     cb4:	0e 94 a8 02 	call	0x550	; 0x550 <nokia_lcd_set_cursor>
			if(timeHours < 10) {nokia_lcd_write_string("0",3);} // if its less than 10 we want a 0 to be in front of it like 08:04.
     cb8:	1a 30       	cpi	r17, 0x0A	; 10
     cba:	28 f4       	brcc	.+10     	; 0xcc6 <main+0x106>
     cbc:	63 e0       	ldi	r22, 0x03	; 3
     cbe:	89 e1       	ldi	r24, 0x19	; 25
     cc0:	91 e0       	ldi	r25, 0x01	; 1
     cc2:	0e 94 95 02 	call	0x52a	; 0x52a <nokia_lcd_write_string>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     cc6:	4a e0       	ldi	r20, 0x0A	; 10
     cc8:	be 01       	movw	r22, r28
     cca:	6f 5f       	subi	r22, 0xFF	; 255
     ccc:	7f 4f       	sbci	r23, 0xFF	; 255
     cce:	81 2f       	mov	r24, r17
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	0e 94 55 09 	call	0x12aa	; 0x12aa <__itoa_ncheck>
			nokia_lcd_write_string(itoa(timeHours,buf,10), 3);
     cd6:	63 e0       	ldi	r22, 0x03	; 3
     cd8:	0e 94 95 02 	call	0x52a	; 0x52a <nokia_lcd_write_string>
			nokia_lcd_write_string(":",3);
     cdc:	63 e0       	ldi	r22, 0x03	; 3
     cde:	8b e1       	ldi	r24, 0x1B	; 27
     ce0:	91 e0       	ldi	r25, 0x01	; 1
     ce2:	0e 94 95 02 	call	0x52a	; 0x52a <nokia_lcd_write_string>
			if(timeMinutes < 10) {nokia_lcd_write_string("0",3);} // same for minutes
     ce6:	0a 30       	cpi	r16, 0x0A	; 10
     ce8:	28 f4       	brcc	.+10     	; 0xcf4 <main+0x134>
     cea:	63 e0       	ldi	r22, 0x03	; 3
     cec:	89 e1       	ldi	r24, 0x19	; 25
     cee:	91 e0       	ldi	r25, 0x01	; 1
     cf0:	0e 94 95 02 	call	0x52a	; 0x52a <nokia_lcd_write_string>
     cf4:	4a e0       	ldi	r20, 0x0A	; 10
     cf6:	be 01       	movw	r22, r28
     cf8:	6f 5f       	subi	r22, 0xFF	; 255
     cfa:	7f 4f       	sbci	r23, 0xFF	; 255
     cfc:	80 2f       	mov	r24, r16
     cfe:	90 e0       	ldi	r25, 0x00	; 0
     d00:	0e 94 55 09 	call	0x12aa	; 0x12aa <__itoa_ncheck>
			nokia_lcd_write_string(itoa(timeMinutes,buf,10), 3);
     d04:	63 e0       	ldi	r22, 0x03	; 3
     d06:	0e 94 95 02 	call	0x52a	; 0x52a <nokia_lcd_write_string>
			nokia_lcd_render();
     d0a:	0e 94 ad 02 	call	0x55a	; 0x55a <nokia_lcd_render>
			if ((PIND & 0x01) && (cursorPosition == 0)){timeHours++; _delay_ms(200);} // if they hit the left button
     d0e:	48 9b       	sbis	0x09, 0	; 9
     d10:	0d c0       	rjmp	.+26     	; 0xd2c <main+0x16c>
     d12:	f1 10       	cpse	r15, r1
     d14:	0b c0       	rjmp	.+22     	; 0xd2c <main+0x16c>
     d16:	1f 5f       	subi	r17, 0xFF	; 255
     d18:	9f ef       	ldi	r25, 0xFF	; 255
     d1a:	a1 ee       	ldi	r26, 0xE1	; 225
     d1c:	b4 e0       	ldi	r27, 0x04	; 4
     d1e:	91 50       	subi	r25, 0x01	; 1
     d20:	a0 40       	sbci	r26, 0x00	; 0
     d22:	b0 40       	sbci	r27, 0x00	; 0
     d24:	e1 f7       	brne	.-8      	; 0xd1e <main+0x15e>
     d26:	00 c0       	rjmp	.+0      	; 0xd28 <main+0x168>
     d28:	00 00       	nop
     d2a:	0f c0       	rjmp	.+30     	; 0xd4a <main+0x18a>
			else if ((PIND & 0x01) && (cursorPosition == 1)){timeMinutes++; _delay_ms(200);}
     d2c:	48 9b       	sbis	0x09, 0	; 9
     d2e:	0d c0       	rjmp	.+26     	; 0xd4a <main+0x18a>
     d30:	e1 e0       	ldi	r30, 0x01	; 1
     d32:	fe 12       	cpse	r15, r30
     d34:	0a c0       	rjmp	.+20     	; 0xd4a <main+0x18a>
     d36:	0f 5f       	subi	r16, 0xFF	; 255
     d38:	ff ef       	ldi	r31, 0xFF	; 255
     d3a:	21 ee       	ldi	r18, 0xE1	; 225
     d3c:	84 e0       	ldi	r24, 0x04	; 4
     d3e:	f1 50       	subi	r31, 0x01	; 1
     d40:	20 40       	sbci	r18, 0x00	; 0
     d42:	80 40       	sbci	r24, 0x00	; 0
     d44:	e1 f7       	brne	.-8      	; 0xd3e <main+0x17e>
     d46:	00 c0       	rjmp	.+0      	; 0xd48 <main+0x188>
     d48:	00 00       	nop
			if (PIND & 0x02){cursorPosition++; _delay_ms(200);}   // if they hit the right button
     d4a:	49 9b       	sbis	0x09, 1	; 9
     d4c:	0a c0       	rjmp	.+20     	; 0xd62 <main+0x1a2>
     d4e:	f3 94       	inc	r15
     d50:	9f ef       	ldi	r25, 0xFF	; 255
     d52:	a1 ee       	ldi	r26, 0xE1	; 225
     d54:	b4 e0       	ldi	r27, 0x04	; 4
     d56:	91 50       	subi	r25, 0x01	; 1
     d58:	a0 40       	sbci	r26, 0x00	; 0
     d5a:	b0 40       	sbci	r27, 0x00	; 0
     d5c:	e1 f7       	brne	.-8      	; 0xd56 <main+0x196>
     d5e:	00 c0       	rjmp	.+0      	; 0xd60 <main+0x1a0>
     d60:	00 00       	nop
			nokia_lcd_clear();
     d62:	0e 94 a9 01 	call	0x352	; 0x352 <nokia_lcd_clear>
			if (timeMinutes >= 60){timeMinutes = 0;} // then reset it in in case its ever above 60 or 24
     d66:	0c 33       	cpi	r16, 0x3C	; 60
     d68:	08 f0       	brcs	.+2      	; 0xd6c <main+0x1ac>
     d6a:	00 e0       	ldi	r16, 0x00	; 0
			if (timeHours >= 24){timeHours = 0;}
     d6c:	18 31       	cpi	r17, 0x18	; 24
     d6e:	08 f4       	brcc	.+2      	; 0xd72 <main+0x1b2>
     d70:	73 cf       	rjmp	.-282    	; 0xc58 <main+0x98>
     d72:	10 e0       	ldi	r17, 0x00	; 0
     d74:	71 cf       	rjmp	.-286    	; 0xc58 <main+0x98>
	}

	RTC2_VALUE->seconds = 0; // we set seconds at 0 then set the minutes as the user entered minutes and hours
     d76:	e0 91 3c 05 	lds	r30, 0x053C	; 0x80053c <RTC2_VALUE>
     d7a:	f0 91 3d 05 	lds	r31, 0x053D	; 0x80053d <RTC2_VALUE+0x1>
     d7e:	10 82       	st	Z, r1
	RTC2_VALUE->minutes = timeMinutes;
     d80:	e0 91 3c 05 	lds	r30, 0x053C	; 0x80053c <RTC2_VALUE>
     d84:	f0 91 3d 05 	lds	r31, 0x053D	; 0x80053d <RTC2_VALUE+0x1>
     d88:	02 83       	std	Z+2, r16	; 0x02
	RTC2_VALUE->hours = timeHours; 
     d8a:	e0 91 3c 05 	lds	r30, 0x053C	; 0x80053c <RTC2_VALUE>
     d8e:	f0 91 3d 05 	lds	r31, 0x053D	; 0x80053d <RTC2_VALUE+0x1>
     d92:	11 83       	std	Z+1, r17	; 0x01
	RTC2_VALUE->date = timeDay;
     d94:	e0 91 3c 05 	lds	r30, 0x053C	; 0x80053c <RTC2_VALUE>
     d98:	f0 91 3d 05 	lds	r31, 0x053D	; 0x80053d <RTC2_VALUE+0x1>
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	84 83       	std	Z+4, r24	; 0x04
	RTC2_VALUE->month = timeMonth;
     da0:	e0 91 3c 05 	lds	r30, 0x053C	; 0x80053c <RTC2_VALUE>
     da4:	f0 91 3d 05 	lds	r31, 0x053D	; 0x80053d <RTC2_VALUE+0x1>
     da8:	85 83       	std	Z+5, r24	; 0x05
	RTC2_VALUE->year = timeYear ;
     daa:	e0 91 3c 05 	lds	r30, 0x053C	; 0x80053c <RTC2_VALUE>
     dae:	f0 91 3d 05 	lds	r31, 0x053D	; 0x80053d <RTC2_VALUE+0x1>
     db2:	81 ee       	ldi	r24, 0xE1	; 225
     db4:	86 83       	std	Z+6, r24	; 0x06

	rtc2_preset(RTC2_VALUE); // then we write to the clock sensor so it uses what we give them from now on
     db6:	80 91 3c 05 	lds	r24, 0x053C	; 0x80053c <RTC2_VALUE>
     dba:	90 91 3d 05 	lds	r25, 0x053D	; 0x80053d <RTC2_VALUE+0x1>
     dbe:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <rtc2_preset>
	char timeDay = 1;
	char timeYear = 2017;
	char slash = 0x5C;   // this is here because I couldnt type / in text without it thinking I was talking about something 
						 // else and saying I was missing something so here it is in the hex code
	char alarmHours = 25; // it has to be at an area that is unreachable because its not initially set
	char alarmMinutes = 61;
     dc2:	0f 2e       	mov	r0, r31
     dc4:	fd e3       	ldi	r31, 0x3D	; 61
     dc6:	ef 2e       	mov	r14, r31
     dc8:	f0 2d       	mov	r31, r0
	char timeMonth = 1;   // the month, year, and day arent being used but need to be put in the clock for writing to it.
	char timeDay = 1;
	char timeYear = 2017;
	char slash = 0x5C;   // this is here because I couldnt type / in text without it thinking I was talking about something 
						 // else and saying I was missing something so here it is in the hex code
	char alarmHours = 25; // it has to be at an area that is unreachable because its not initially set
     dca:	0f 2e       	mov	r0, r31
     dcc:	f9 e1       	ldi	r31, 0x19	; 25
     dce:	ff 2e       	mov	r15, r31
     dd0:	f0 2d       	mov	r31, r0
	char PinTracker; // used later on to keep track of pins so we dont turn anything on or off
	nokia_lcd_init(); // start up the lcd
	nokia_lcd_clear(); // clear the lcd
	DDRD |= 0b10000011; // set the DDRD so the pins can be used for the buzzer and the 
	char buf[10] = {0}; // buffer for writing characters to for itoa.
	char ButtonBTime = 0; // how long button B was held down
     dd2:	b1 2c       	mov	r11, r1
     dd4:	6e 01       	movw	r12, r28
     dd6:	e5 e1       	ldi	r30, 0x15	; 21
     dd8:	ce 0e       	add	r12, r30
     dda:	d1 1c       	adc	r13, r1
	RTC2_VALUE->year = timeYear ;

	rtc2_preset(RTC2_VALUE); // then we write to the clock sensor so it uses what we give them from now on

	while(1){
	drawImage(img); // this calls the draw image function to set the image
     ddc:	82 e4       	ldi	r24, 0x42	; 66
     dde:	91 e0       	ldi	r25, 0x01	; 1
     de0:	0e 94 55 05 	call	0xaaa	; 0xaaa <drawImage>
	rtc2_update(RTC2_VALUE); // update the time from the clock.
     de4:	80 91 3c 05 	lds	r24, 0x053C	; 0x80053c <RTC2_VALUE>
     de8:	90 91 3d 05 	lds	r25, 0x053D	; 0x80053d <RTC2_VALUE+0x1>
     dec:	0e 94 51 05 	call	0xaa2	; 0xaa2 <rtc2_update>
	
	nokia_lcd_set_cursor(6, 6);
     df0:	66 e0       	ldi	r22, 0x06	; 6
     df2:	86 e0       	ldi	r24, 0x06	; 6
     df4:	0e 94 a8 02 	call	0x550	; 0x550 <nokia_lcd_set_cursor>
	if(RTC2_VALUE->hours < 10){nokia_lcd_write_string("0",1);} // if the time is below 10 we want to add a 0 before it so everything fits nice and flush
     df8:	e0 91 3c 05 	lds	r30, 0x053C	; 0x80053c <RTC2_VALUE>
     dfc:	f0 91 3d 05 	lds	r31, 0x053D	; 0x80053d <RTC2_VALUE+0x1>
     e00:	81 81       	ldd	r24, Z+1	; 0x01
     e02:	8a 30       	cpi	r24, 0x0A	; 10
     e04:	28 f4       	brcc	.+10     	; 0xe10 <main+0x250>
     e06:	61 e0       	ldi	r22, 0x01	; 1
     e08:	89 e1       	ldi	r24, 0x19	; 25
     e0a:	91 e0       	ldi	r25, 0x01	; 1
     e0c:	0e 94 95 02 	call	0x52a	; 0x52a <nokia_lcd_write_string>
	nokia_lcd_write_string(itoa(RTC2_VALUE->hours,buf,10),1);  // write the time to the LCD
     e10:	e0 91 3c 05 	lds	r30, 0x053C	; 0x80053c <RTC2_VALUE>
     e14:	f0 91 3d 05 	lds	r31, 0x053D	; 0x80053d <RTC2_VALUE+0x1>
     e18:	81 81       	ldd	r24, Z+1	; 0x01
     e1a:	4a e0       	ldi	r20, 0x0A	; 10
     e1c:	be 01       	movw	r22, r28
     e1e:	6f 5f       	subi	r22, 0xFF	; 255
     e20:	7f 4f       	sbci	r23, 0xFF	; 255
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	0e 94 55 09 	call	0x12aa	; 0x12aa <__itoa_ncheck>
     e28:	61 e0       	ldi	r22, 0x01	; 1
     e2a:	0e 94 95 02 	call	0x52a	; 0x52a <nokia_lcd_write_string>
	nokia_lcd_write_string(":",1);
     e2e:	61 e0       	ldi	r22, 0x01	; 1
     e30:	8b e1       	ldi	r24, 0x1B	; 27
     e32:	91 e0       	ldi	r25, 0x01	; 1
     e34:	0e 94 95 02 	call	0x52a	; 0x52a <nokia_lcd_write_string>
	if(RTC2_VALUE->minutes < 10){nokia_lcd_write_string("0",1);}
     e38:	e0 91 3c 05 	lds	r30, 0x053C	; 0x80053c <RTC2_VALUE>
     e3c:	f0 91 3d 05 	lds	r31, 0x053D	; 0x80053d <RTC2_VALUE+0x1>
     e40:	82 81       	ldd	r24, Z+2	; 0x02
     e42:	8a 30       	cpi	r24, 0x0A	; 10
     e44:	28 f4       	brcc	.+10     	; 0xe50 <main+0x290>
     e46:	61 e0       	ldi	r22, 0x01	; 1
     e48:	89 e1       	ldi	r24, 0x19	; 25
     e4a:	91 e0       	ldi	r25, 0x01	; 1
     e4c:	0e 94 95 02 	call	0x52a	; 0x52a <nokia_lcd_write_string>
	nokia_lcd_write_string(itoa(RTC2_VALUE->minutes,buf,10),1);
     e50:	e0 91 3c 05 	lds	r30, 0x053C	; 0x80053c <RTC2_VALUE>
     e54:	f0 91 3d 05 	lds	r31, 0x053D	; 0x80053d <RTC2_VALUE+0x1>
     e58:	82 81       	ldd	r24, Z+2	; 0x02
     e5a:	4a e0       	ldi	r20, 0x0A	; 10
     e5c:	be 01       	movw	r22, r28
     e5e:	6f 5f       	subi	r22, 0xFF	; 255
     e60:	7f 4f       	sbci	r23, 0xFF	; 255
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	0e 94 55 09 	call	0x12aa	; 0x12aa <__itoa_ncheck>
     e68:	61 e0       	ldi	r22, 0x01	; 1
     e6a:	0e 94 95 02 	call	0x52a	; 0x52a <nokia_lcd_write_string>
	nokia_lcd_write_string(":",1);
     e6e:	61 e0       	ldi	r22, 0x01	; 1
     e70:	8b e1       	ldi	r24, 0x1B	; 27
     e72:	91 e0       	ldi	r25, 0x01	; 1
     e74:	0e 94 95 02 	call	0x52a	; 0x52a <nokia_lcd_write_string>
	if(RTC2_VALUE->seconds < 10){nokia_lcd_write_string("0",1);}
     e78:	e0 91 3c 05 	lds	r30, 0x053C	; 0x80053c <RTC2_VALUE>
     e7c:	f0 91 3d 05 	lds	r31, 0x053D	; 0x80053d <RTC2_VALUE+0x1>
     e80:	80 81       	ld	r24, Z
     e82:	8a 30       	cpi	r24, 0x0A	; 10
     e84:	28 f4       	brcc	.+10     	; 0xe90 <main+0x2d0>
     e86:	61 e0       	ldi	r22, 0x01	; 1
     e88:	89 e1       	ldi	r24, 0x19	; 25
     e8a:	91 e0       	ldi	r25, 0x01	; 1
     e8c:	0e 94 95 02 	call	0x52a	; 0x52a <nokia_lcd_write_string>
	nokia_lcd_write_string(itoa(RTC2_VALUE->seconds,buf,10),1);
     e90:	e0 91 3c 05 	lds	r30, 0x053C	; 0x80053c <RTC2_VALUE>
     e94:	f0 91 3d 05 	lds	r31, 0x053D	; 0x80053d <RTC2_VALUE+0x1>
     e98:	80 81       	ld	r24, Z
     e9a:	4a e0       	ldi	r20, 0x0A	; 10
     e9c:	be 01       	movw	r22, r28
     e9e:	6f 5f       	subi	r22, 0xFF	; 255
     ea0:	7f 4f       	sbci	r23, 0xFF	; 255
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	0e 94 55 09 	call	0x12aa	; 0x12aa <__itoa_ncheck>
     ea8:	61 e0       	ldi	r22, 0x01	; 1
     eaa:	0e 94 95 02 	call	0x52a	; 0x52a <nokia_lcd_write_string>
	
	// this is for checking the temperature from the sensor
	
	PORTC &= ~_BV(DHT11_PIN);    // 1. pull-down i/o pin for 18ms
     eae:	40 98       	cbi	0x08, 0	; 8
     eb0:	8f e9       	ldi	r24, 0x9F	; 159
     eb2:	9c e8       	ldi	r25, 0x8C	; 140
     eb4:	01 97       	sbiw	r24, 0x01	; 1
     eb6:	f1 f7       	brne	.-4      	; 0xeb4 <main+0x2f4>
     eb8:	00 c0       	rjmp	.+0      	; 0xeba <main+0x2fa>
     eba:	00 00       	nop
	_delay_ms(18);
	PORTC |= _BV(DHT11_PIN);     // 2. pull-up i/o pin for 40us
     ebc:	40 9a       	sbi	0x08, 0	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ebe:	92 e0       	ldi	r25, 0x02	; 2
     ec0:	9a 95       	dec	r25
     ec2:	f1 f7       	brne	.-4      	; 0xec0 <main+0x300>
     ec4:	00 c0       	rjmp	.+0      	; 0xec6 <main+0x306>
	_delay_us(1);
	DDRC &= ~_BV(DHT11_PIN);     //let analog port 0 be input port
     ec6:	38 98       	cbi	0x07, 0	; 7
     ec8:	aa e6       	ldi	r26, 0x6A	; 106
     eca:	aa 95       	dec	r26
     ecc:	f1 f7       	brne	.-4      	; 0xeca <main+0x30a>
     ece:	00 c0       	rjmp	.+0      	; 0xed0 <main+0x310>
	_delay_us(40);

	dht11_in = PINC & _BV(DHT11_PIN);  // read only the input port 0
     ed0:	86 b1       	in	r24, 0x06	; 6
     ed2:	b5 ed       	ldi	r27, 0xD5	; 213
     ed4:	ba 95       	dec	r27
     ed6:	f1 f7       	brne	.-4      	; 0xed4 <main+0x314>
     ed8:	00 00       	nop
	_delay_us(80);
	dht11_in = PINC & _BV(DHT11_PIN);
     eda:	86 b1       	in	r24, 0x06	; 6
     edc:	e5 ed       	ldi	r30, 0xD5	; 213
     ede:	ea 95       	dec	r30
     ee0:	f1 f7       	brne	.-4      	; 0xede <main+0x31e>
     ee2:	00 00       	nop
     ee4:	8e 01       	movw	r16, r28
     ee6:	05 5f       	subi	r16, 0xF5	; 245
     ee8:	1f 4f       	sbci	r17, 0xFF	; 255
	_delay_us(80);// now ready for data reception
	for (i=0; i<5; i++)
	{  dht11_dat[i] = read_dht11_dat();}  //recieved 40 bits data. Details are described in datasheet
     eea:	0e 94 c1 05 	call	0xb82	; 0xb82 <read_dht11_dat>
     eee:	d8 01       	movw	r26, r16
     ef0:	8d 93       	st	X+, r24
     ef2:	9d 93       	st	X+, r25
     ef4:	8d 01       	movw	r16, r26

	dht11_in = PINC & _BV(DHT11_PIN);  // read only the input port 0
	_delay_us(80);
	dht11_in = PINC & _BV(DHT11_PIN);
	_delay_us(80);// now ready for data reception
	for (i=0; i<5; i++)
     ef6:	ca 16       	cp	r12, r26
     ef8:	db 06       	cpc	r13, r27
     efa:	b9 f7       	brne	.-18     	; 0xeea <main+0x32a>
	{  dht11_dat[i] = read_dht11_dat();}  //recieved 40 bits data. Details are described in datasheet

	DDRC |= _BV(DHT11_PIN);      //let analog port 0 be output port after all the data have been received
     efc:	38 9a       	sbi	0x07, 0	; 7
	PORTC |= _BV(DHT11_PIN);     //let the  value of this port be '1' after all the data have been received
     efe:	40 9a       	sbi	0x08, 0	; 8
	int dht11_check_sum = dht11_dat[0]+dht11_dat[1]+dht11_dat[2]+dht11_dat[3];// check check_sum
	
	if(PIND & 0x01){ // if someone is holding down button 1 show the temperature instead of time.
     f00:	48 9b       	sbis	0x09, 0	; 9
     f02:	37 c0       	rjmp	.+110    	; 0xf72 <main+0x3b2>
	for (i=0; i<5; i++)
	{  dht11_dat[i] = read_dht11_dat();}  //recieved 40 bits data. Details are described in datasheet

	DDRC |= _BV(DHT11_PIN);      //let analog port 0 be output port after all the data have been received
	PORTC |= _BV(DHT11_PIN);     //let the  value of this port be '1' after all the data have been received
	int dht11_check_sum = dht11_dat[0]+dht11_dat[1]+dht11_dat[2]+dht11_dat[3];// check check_sum
     f04:	0b 85       	ldd	r16, Y+11	; 0x0b
     f06:	1c 85       	ldd	r17, Y+12	; 0x0c
     f08:	8f 84       	ldd	r8, Y+15	; 0x0f
     f0a:	98 88       	ldd	r9, Y+16	; 0x10
	
	if(PIND & 0x01){ // if someone is holding down button 1 show the temperature instead of time.
		nokia_lcd_clear();
     f0c:	0e 94 a9 01 	call	0x352	; 0x352 <nokia_lcd_clear>
		drawImage(img);
     f10:	82 e4       	ldi	r24, 0x42	; 66
     f12:	91 e0       	ldi	r25, 0x01	; 1
     f14:	0e 94 55 05 	call	0xaaa	; 0xaaa <drawImage>
		
		nokia_lcd_set_cursor(9, 6);
     f18:	66 e0       	ldi	r22, 0x06	; 6
     f1a:	89 e0       	ldi	r24, 0x09	; 9
     f1c:	0e 94 a8 02 	call	0x550	; 0x550 <nokia_lcd_set_cursor>
     f20:	4a e0       	ldi	r20, 0x0A	; 10
     f22:	be 01       	movw	r22, r28
     f24:	6f 5f       	subi	r22, 0xFF	; 255
     f26:	7f 4f       	sbci	r23, 0xFF	; 255
     f28:	c4 01       	movw	r24, r8
     f2a:	0e 94 55 09 	call	0x12aa	; 0x12aa <__itoa_ncheck>
		nokia_lcd_write_string(itoa(dht11_dat[2],buf, 10),1);
     f2e:	61 e0       	ldi	r22, 0x01	; 1
     f30:	0e 94 95 02 	call	0x52a	; 0x52a <nokia_lcd_write_string>
		nokia_lcd_write_string("C ",1);
     f34:	61 e0       	ldi	r22, 0x01	; 1
     f36:	8d e1       	ldi	r24, 0x1D	; 29
     f38:	91 e0       	ldi	r25, 0x01	; 1
     f3a:	0e 94 95 02 	call	0x52a	; 0x52a <nokia_lcd_write_string>
     f3e:	4a e0       	ldi	r20, 0x0A	; 10
     f40:	be 01       	movw	r22, r28
     f42:	6f 5f       	subi	r22, 0xFF	; 255
     f44:	7f 4f       	sbci	r23, 0xFF	; 255
     f46:	c8 01       	movw	r24, r16
     f48:	0e 94 55 09 	call	0x12aa	; 0x12aa <__itoa_ncheck>
		nokia_lcd_write_string(itoa(dht11_dat[0],buf, 10),1);
     f4c:	61 e0       	ldi	r22, 0x01	; 1
     f4e:	0e 94 95 02 	call	0x52a	; 0x52a <nokia_lcd_write_string>
		nokia_lcd_write_string("%",1);
     f52:	61 e0       	ldi	r22, 0x01	; 1
     f54:	80 e2       	ldi	r24, 0x20	; 32
     f56:	91 e0       	ldi	r25, 0x01	; 1
     f58:	0e 94 95 02 	call	0x52a	; 0x52a <nokia_lcd_write_string>
		nokia_lcd_render();
     f5c:	0e 94 ad 02 	call	0x55a	; 0x55a <nokia_lcd_render>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     f60:	bf ef       	ldi	r27, 0xFF	; 255
     f62:	e2 e5       	ldi	r30, 0x52	; 82
     f64:	f7 e0       	ldi	r31, 0x07	; 7
     f66:	b1 50       	subi	r27, 0x01	; 1
     f68:	e0 40       	sbci	r30, 0x00	; 0
     f6a:	f0 40       	sbci	r31, 0x00	; 0
     f6c:	e1 f7       	brne	.-8      	; 0xf66 <main+0x3a6>
     f6e:	00 c0       	rjmp	.+0      	; 0xf70 <main+0x3b0>
     f70:	00 00       	nop
		_delay_ms(300);
		
	}
	if (PIND & 0x02){ButtonBTime++;} // if someones holding down the right button add to the counter otherwise set it to 0
     f72:	49 9b       	sbis	0x09, 1	; 9
     f74:	d2 c0       	rjmp	.+420    	; 0x111a <main+0x55a>
     f76:	b3 94       	inc	r11
	else{ButtonBTime = 0;}
	if(ButtonBTime >= 15) // if its been held for 15 consecutive cycles have the user input the time
     f78:	2e e0       	ldi	r18, 0x0E	; 14
     f7a:	2b 15       	cp	r18, r11
     f7c:	08 f0       	brcs	.+2      	; 0xf80 <main+0x3c0>
     f7e:	ce c0       	rjmp	.+412    	; 0x111c <main+0x55c>
	{
			nokia_lcd_clear();
     f80:	0e 94 a9 01 	call	0x352	; 0x352 <nokia_lcd_clear>
			nokia_lcd_set_cursor(10,20);
     f84:	64 e1       	ldi	r22, 0x14	; 20
     f86:	8a e0       	ldi	r24, 0x0A	; 10
     f88:	0e 94 a8 02 	call	0x550	; 0x550 <nokia_lcd_set_cursor>
			nokia_lcd_write_string("Please Enter",1);
     f8c:	61 e0       	ldi	r22, 0x01	; 1
     f8e:	80 e0       	ldi	r24, 0x00	; 0
     f90:	91 e0       	ldi	r25, 0x01	; 1
     f92:	0e 94 95 02 	call	0x52a	; 0x52a <nokia_lcd_write_string>
			nokia_lcd_set_cursor(4,28);
     f96:	6c e1       	ldi	r22, 0x1C	; 28
     f98:	84 e0       	ldi	r24, 0x04	; 4
     f9a:	0e 94 a8 02 	call	0x550	; 0x550 <nokia_lcd_set_cursor>
			nokia_lcd_write_string("Alarm Time.",1);
     f9e:	61 e0       	ldi	r22, 0x01	; 1
     fa0:	82 e2       	ldi	r24, 0x22	; 34
     fa2:	91 e0       	ldi	r25, 0x01	; 1
     fa4:	0e 94 95 02 	call	0x52a	; 0x52a <nokia_lcd_write_string>
			nokia_lcd_render();
     fa8:	0e 94 ad 02 	call	0x55a	; 0x55a <nokia_lcd_render>
			nokia_lcd_clear();
     fac:	0e 94 a9 01 	call	0x352	; 0x352 <nokia_lcd_clear>
     fb0:	8f ef       	ldi	r24, 0xFF	; 255
     fb2:	93 ed       	ldi	r25, 0xD3	; 211
     fb4:	a0 e3       	ldi	r26, 0x30	; 48
     fb6:	81 50       	subi	r24, 0x01	; 1
     fb8:	90 40       	sbci	r25, 0x00	; 0
     fba:	a0 40       	sbci	r26, 0x00	; 0
     fbc:	e1 f7       	brne	.-8      	; 0xfb6 <main+0x3f6>
     fbe:	00 c0       	rjmp	.+0      	; 0xfc0 <main+0x400>
     fc0:	00 00       	nop
			_delay_ms(2000);
			cursorPosition = 0;
			alarmHours = 0;	// set alarm time to be 0 so it starts over
			alarmMinutes = 0; 
     fc2:	e1 2c       	mov	r14, r1
			nokia_lcd_write_string("Alarm Time.",1);
			nokia_lcd_render();
			nokia_lcd_clear();
			_delay_ms(2000);
			cursorPosition = 0;
			alarmHours = 0;	// set alarm time to be 0 so it starts over
     fc4:	f1 2c       	mov	r15, r1
			nokia_lcd_set_cursor(4,28);
			nokia_lcd_write_string("Alarm Time.",1);
			nokia_lcd_render();
			nokia_lcd_clear();
			_delay_ms(2000);
			cursorPosition = 0;
     fc6:	10 e0       	ldi	r17, 0x00	; 0
     fc8:	03 c0       	rjmp	.+6      	; 0xfd0 <main+0x410>
			alarmHours = 0;	// set alarm time to be 0 so it starts over
			alarmMinutes = 0; 
		while(1){
			if(cursorPosition == 2){break;} // exact same setup as entering the time just with the Alarm Instead
     fca:	12 30       	cpi	r17, 0x02	; 2
     fcc:	09 f4       	brne	.+2      	; 0xfd0 <main+0x410>
     fce:	8d c0       	rjmp	.+282    	; 0x10ea <main+0x52a>
			if(cursorPosition == 0){ nokia_lcd_set_cursor(12,0); nokia_lcd_write_string("/",2);  nokia_lcd_set_cursor(20,0); nokia_lcd_write_char(slash,2);}
     fd0:	11 11       	cpse	r17, r1
     fd2:	12 c0       	rjmp	.+36     	; 0xff8 <main+0x438>
     fd4:	60 e0       	ldi	r22, 0x00	; 0
     fd6:	8c e0       	ldi	r24, 0x0C	; 12
     fd8:	0e 94 a8 02 	call	0x550	; 0x550 <nokia_lcd_set_cursor>
     fdc:	62 e0       	ldi	r22, 0x02	; 2
     fde:	87 e1       	ldi	r24, 0x17	; 23
     fe0:	91 e0       	ldi	r25, 0x01	; 1
     fe2:	0e 94 95 02 	call	0x52a	; 0x52a <nokia_lcd_write_string>
     fe6:	60 e0       	ldi	r22, 0x00	; 0
     fe8:	84 e1       	ldi	r24, 0x14	; 20
     fea:	0e 94 a8 02 	call	0x550	; 0x550 <nokia_lcd_set_cursor>
     fee:	62 e0       	ldi	r22, 0x02	; 2
     ff0:	8c e5       	ldi	r24, 0x5C	; 92
     ff2:	0e 94 e7 01 	call	0x3ce	; 0x3ce <nokia_lcd_write_char>
     ff6:	13 c0       	rjmp	.+38     	; 0x101e <main+0x45e>
			if(cursorPosition == 1){ nokia_lcd_set_cursor(58,0); nokia_lcd_write_string("/",2);  nokia_lcd_set_cursor(66,0); nokia_lcd_write_char(slash,2);}
     ff8:	11 30       	cpi	r17, 0x01	; 1
     ffa:	89 f4       	brne	.+34     	; 0x101e <main+0x45e>
     ffc:	60 e0       	ldi	r22, 0x00	; 0
     ffe:	8a e3       	ldi	r24, 0x3A	; 58
    1000:	0e 94 a8 02 	call	0x550	; 0x550 <nokia_lcd_set_cursor>
    1004:	62 e0       	ldi	r22, 0x02	; 2
    1006:	87 e1       	ldi	r24, 0x17	; 23
    1008:	91 e0       	ldi	r25, 0x01	; 1
    100a:	0e 94 95 02 	call	0x52a	; 0x52a <nokia_lcd_write_string>
    100e:	60 e0       	ldi	r22, 0x00	; 0
    1010:	82 e4       	ldi	r24, 0x42	; 66
    1012:	0e 94 a8 02 	call	0x550	; 0x550 <nokia_lcd_set_cursor>
    1016:	62 e0       	ldi	r22, 0x02	; 2
    1018:	8c e5       	ldi	r24, 0x5C	; 92
    101a:	0e 94 e7 01 	call	0x3ce	; 0x3ce <nokia_lcd_write_char>
			nokia_lcd_set_cursor(5,16);
    101e:	60 e1       	ldi	r22, 0x10	; 16
    1020:	85 e0       	ldi	r24, 0x05	; 5
    1022:	0e 94 a8 02 	call	0x550	; 0x550 <nokia_lcd_set_cursor>
			if(alarmHours < 10) {nokia_lcd_write_string("0",3);}
    1026:	b9 e0       	ldi	r27, 0x09	; 9
    1028:	bf 15       	cp	r27, r15
    102a:	28 f0       	brcs	.+10     	; 0x1036 <main+0x476>
    102c:	63 e0       	ldi	r22, 0x03	; 3
    102e:	89 e1       	ldi	r24, 0x19	; 25
    1030:	91 e0       	ldi	r25, 0x01	; 1
    1032:	0e 94 95 02 	call	0x52a	; 0x52a <nokia_lcd_write_string>
    1036:	4a e0       	ldi	r20, 0x0A	; 10
    1038:	be 01       	movw	r22, r28
    103a:	6f 5f       	subi	r22, 0xFF	; 255
    103c:	7f 4f       	sbci	r23, 0xFF	; 255
    103e:	8f 2d       	mov	r24, r15
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	0e 94 55 09 	call	0x12aa	; 0x12aa <__itoa_ncheck>
			nokia_lcd_write_string(itoa(alarmHours,buf,10), 3);
    1046:	63 e0       	ldi	r22, 0x03	; 3
    1048:	0e 94 95 02 	call	0x52a	; 0x52a <nokia_lcd_write_string>
			nokia_lcd_write_string(":",3);
    104c:	63 e0       	ldi	r22, 0x03	; 3
    104e:	8b e1       	ldi	r24, 0x1B	; 27
    1050:	91 e0       	ldi	r25, 0x01	; 1
    1052:	0e 94 95 02 	call	0x52a	; 0x52a <nokia_lcd_write_string>
			if(alarmMinutes < 10) {nokia_lcd_write_string("0",3);}
    1056:	e9 e0       	ldi	r30, 0x09	; 9
    1058:	ee 15       	cp	r30, r14
    105a:	28 f0       	brcs	.+10     	; 0x1066 <main+0x4a6>
    105c:	63 e0       	ldi	r22, 0x03	; 3
    105e:	89 e1       	ldi	r24, 0x19	; 25
    1060:	91 e0       	ldi	r25, 0x01	; 1
    1062:	0e 94 95 02 	call	0x52a	; 0x52a <nokia_lcd_write_string>
    1066:	4a e0       	ldi	r20, 0x0A	; 10
    1068:	be 01       	movw	r22, r28
    106a:	6f 5f       	subi	r22, 0xFF	; 255
    106c:	7f 4f       	sbci	r23, 0xFF	; 255
    106e:	8e 2d       	mov	r24, r14
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	0e 94 55 09 	call	0x12aa	; 0x12aa <__itoa_ncheck>
			nokia_lcd_write_string(itoa(alarmMinutes,buf,10), 3);
    1076:	63 e0       	ldi	r22, 0x03	; 3
    1078:	0e 94 95 02 	call	0x52a	; 0x52a <nokia_lcd_write_string>
			nokia_lcd_render();
    107c:	0e 94 ad 02 	call	0x55a	; 0x55a <nokia_lcd_render>
			if ((PIND & 0x01) && (cursorPosition == 0)){alarmHours++; _delay_ms(200);} // left button
    1080:	48 9b       	sbis	0x09, 0	; 9
    1082:	0d c0       	rjmp	.+26     	; 0x109e <main+0x4de>
    1084:	11 11       	cpse	r17, r1
    1086:	0b c0       	rjmp	.+22     	; 0x109e <main+0x4de>
    1088:	f3 94       	inc	r15
    108a:	ff ef       	ldi	r31, 0xFF	; 255
    108c:	21 ee       	ldi	r18, 0xE1	; 225
    108e:	84 e0       	ldi	r24, 0x04	; 4
    1090:	f1 50       	subi	r31, 0x01	; 1
    1092:	20 40       	sbci	r18, 0x00	; 0
    1094:	80 40       	sbci	r24, 0x00	; 0
    1096:	e1 f7       	brne	.-8      	; 0x1090 <main+0x4d0>
    1098:	00 c0       	rjmp	.+0      	; 0x109a <main+0x4da>
    109a:	00 00       	nop
    109c:	0e c0       	rjmp	.+28     	; 0x10ba <main+0x4fa>
			else if ((PIND & 0x01) && (cursorPosition == 1)){alarmMinutes++; _delay_ms(200);}
    109e:	48 9b       	sbis	0x09, 0	; 9
    10a0:	0c c0       	rjmp	.+24     	; 0x10ba <main+0x4fa>
    10a2:	11 30       	cpi	r17, 0x01	; 1
    10a4:	51 f4       	brne	.+20     	; 0x10ba <main+0x4fa>
    10a6:	e3 94       	inc	r14
    10a8:	9f ef       	ldi	r25, 0xFF	; 255
    10aa:	a1 ee       	ldi	r26, 0xE1	; 225
    10ac:	b4 e0       	ldi	r27, 0x04	; 4
    10ae:	91 50       	subi	r25, 0x01	; 1
    10b0:	a0 40       	sbci	r26, 0x00	; 0
    10b2:	b0 40       	sbci	r27, 0x00	; 0
    10b4:	e1 f7       	brne	.-8      	; 0x10ae <main+0x4ee>
    10b6:	00 c0       	rjmp	.+0      	; 0x10b8 <main+0x4f8>
    10b8:	00 00       	nop
			if (PIND & 0x02){cursorPosition++; _delay_ms(200);}   // right button
    10ba:	49 9b       	sbis	0x09, 1	; 9
    10bc:	0a c0       	rjmp	.+20     	; 0x10d2 <main+0x512>
    10be:	1f 5f       	subi	r17, 0xFF	; 255
    10c0:	ef ef       	ldi	r30, 0xFF	; 255
    10c2:	f1 ee       	ldi	r31, 0xE1	; 225
    10c4:	24 e0       	ldi	r18, 0x04	; 4
    10c6:	e1 50       	subi	r30, 0x01	; 1
    10c8:	f0 40       	sbci	r31, 0x00	; 0
    10ca:	20 40       	sbci	r18, 0x00	; 0
    10cc:	e1 f7       	brne	.-8      	; 0x10c6 <main+0x506>
    10ce:	00 c0       	rjmp	.+0      	; 0x10d0 <main+0x510>
    10d0:	00 00       	nop
			nokia_lcd_clear();
    10d2:	0e 94 a9 01 	call	0x352	; 0x352 <nokia_lcd_clear>
			if (alarmMinutes >= 60){alarmMinutes = 0;}
    10d6:	8b e3       	ldi	r24, 0x3B	; 59
    10d8:	8e 15       	cp	r24, r14
    10da:	08 f4       	brcc	.+2      	; 0x10de <main+0x51e>
    10dc:	e1 2c       	mov	r14, r1
			if (alarmHours >= 24){alarmHours = 0;}
    10de:	97 e1       	ldi	r25, 0x17	; 23
    10e0:	9f 15       	cp	r25, r15
    10e2:	08 f0       	brcs	.+2      	; 0x10e6 <main+0x526>
    10e4:	72 cf       	rjmp	.-284    	; 0xfca <main+0x40a>
    10e6:	f1 2c       	mov	r15, r1
    10e8:	70 cf       	rjmp	.-288    	; 0xfca <main+0x40a>
		}
		nokia_lcd_clear();
    10ea:	0e 94 a9 01 	call	0x352	; 0x352 <nokia_lcd_clear>
		nokia_lcd_set_cursor(10,20);
    10ee:	64 e1       	ldi	r22, 0x14	; 20
    10f0:	8a e0       	ldi	r24, 0x0A	; 10
    10f2:	0e 94 a8 02 	call	0x550	; 0x550 <nokia_lcd_set_cursor>
		nokia_lcd_write_string("Alarm Set",1); // then we tell the user the alarm is set and exit
    10f6:	61 e0       	ldi	r22, 0x01	; 1
    10f8:	8e e2       	ldi	r24, 0x2E	; 46
    10fa:	91 e0       	ldi	r25, 0x01	; 1
    10fc:	0e 94 95 02 	call	0x52a	; 0x52a <nokia_lcd_write_string>
		nokia_lcd_render();
    1100:	0e 94 ad 02 	call	0x55a	; 0x55a <nokia_lcd_render>
    1104:	af ef       	ldi	r26, 0xFF	; 255
    1106:	b3 ed       	ldi	r27, 0xD3	; 211
    1108:	e0 e3       	ldi	r30, 0x30	; 48
    110a:	a1 50       	subi	r26, 0x01	; 1
    110c:	b0 40       	sbci	r27, 0x00	; 0
    110e:	e0 40       	sbci	r30, 0x00	; 0
    1110:	e1 f7       	brne	.-8      	; 0x110a <main+0x54a>
    1112:	00 c0       	rjmp	.+0      	; 0x1114 <main+0x554>
    1114:	00 00       	nop
		_delay_ms(2000);
		ButtonBTime = 0;
    1116:	b1 2c       	mov	r11, r1
    1118:	01 c0       	rjmp	.+2      	; 0x111c <main+0x55c>
		nokia_lcd_render();
		_delay_ms(300);
		
	}
	if (PIND & 0x02){ButtonBTime++;} // if someones holding down the right button add to the counter otherwise set it to 0
	else{ButtonBTime = 0;}
    111a:	b1 2c       	mov	r11, r1
		nokia_lcd_render();
		_delay_ms(2000);
		ButtonBTime = 0;
	}
	// this is when the alarm must go off.
	if(alarmHours == RTC2_VALUE->hours && alarmMinutes == RTC2_VALUE->minutes){ // if its time for the alarm to go off we enter this if statement
    111c:	e0 91 3c 05 	lds	r30, 0x053C	; 0x80053c <RTC2_VALUE>
    1120:	f0 91 3d 05 	lds	r31, 0x053D	; 0x80053d <RTC2_VALUE+0x1>
    1124:	81 81       	ldd	r24, Z+1	; 0x01
    1126:	f8 12       	cpse	r15, r24
    1128:	a6 c0       	rjmp	.+332    	; 0x1276 <main+0x6b6>
    112a:	e0 91 3c 05 	lds	r30, 0x053C	; 0x80053c <RTC2_VALUE>
    112e:	f0 91 3d 05 	lds	r31, 0x053D	; 0x80053d <RTC2_VALUE+0x1>
    1132:	82 81       	ldd	r24, Z+2	; 0x02
    1134:	e8 12       	cpse	r14, r24
    1136:	9f c0       	rjmp	.+318    	; 0x1276 <main+0x6b6>
		
		PinTracker = PORTD; // I save it for later so I can keep the pins and have them go back to what they were originally. 
    1138:	1b b1       	in	r17, 0x0b	; 11
    113a:	ff ef       	ldi	r31, 0xFF	; 255
    113c:	29 e6       	ldi	r18, 0x69	; 105
    113e:	88 e1       	ldi	r24, 0x18	; 24
    1140:	f1 50       	subi	r31, 0x01	; 1
    1142:	20 40       	sbci	r18, 0x00	; 0
    1144:	80 40       	sbci	r24, 0x00	; 0
    1146:	e1 f7       	brne	.-8      	; 0x1140 <main+0x580>
    1148:	00 c0       	rjmp	.+0      	; 0x114a <main+0x58a>
    114a:	00 00       	nop
		_delay_ms(1000);
		PORTD ^= 0x80; 
    114c:	8b b1       	in	r24, 0x0b	; 11
    114e:	80 58       	subi	r24, 0x80	; 128
    1150:	8b b9       	out	0x0b, r24	; 11
    1152:	9f ef       	ldi	r25, 0xFF	; 255
    1154:	a0 e7       	ldi	r26, 0x70	; 112
    1156:	b2 e0       	ldi	r27, 0x02	; 2
    1158:	91 50       	subi	r25, 0x01	; 1
    115a:	a0 40       	sbci	r26, 0x00	; 0
    115c:	b0 40       	sbci	r27, 0x00	; 0
    115e:	e1 f7       	brne	.-8      	; 0x1158 <main+0x598>
    1160:	00 c0       	rjmp	.+0      	; 0x1162 <main+0x5a2>
    1162:	00 00       	nop
		_delay_ms(100);
		nokia_lcd_clear();
    1164:	0e 94 a9 01 	call	0x352	; 0x352 <nokia_lcd_clear>
		nokia_lcd_set_cursor(10,20);
    1168:	64 e1       	ldi	r22, 0x14	; 20
    116a:	8a e0       	ldi	r24, 0x0A	; 10
    116c:	0e 94 a8 02 	call	0x550	; 0x550 <nokia_lcd_set_cursor>
		nokia_lcd_write_string("ITS TIME!",1);
    1170:	61 e0       	ldi	r22, 0x01	; 1
    1172:	88 e3       	ldi	r24, 0x38	; 56
    1174:	91 e0       	ldi	r25, 0x01	; 1
    1176:	0e 94 95 02 	call	0x52a	; 0x52a <nokia_lcd_write_string>
		nokia_lcd_render();
    117a:	0e 94 ad 02 	call	0x55a	; 0x55a <nokia_lcd_render>
		while(1){	
				PORTD ^= 0x80;  // this turns the alarm on and off forever until a button is pressed.
    117e:	8b b1       	in	r24, 0x0b	; 11
    1180:	80 58       	subi	r24, 0x80	; 128
    1182:	8b b9       	out	0x0b, r24	; 11
    1184:	ef ef       	ldi	r30, 0xFF	; 255
    1186:	f0 e7       	ldi	r31, 0x70	; 112
    1188:	22 e0       	ldi	r18, 0x02	; 2
    118a:	e1 50       	subi	r30, 0x01	; 1
    118c:	f0 40       	sbci	r31, 0x00	; 0
    118e:	20 40       	sbci	r18, 0x00	; 0
    1190:	e1 f7       	brne	.-8      	; 0x118a <main+0x5ca>
    1192:	00 c0       	rjmp	.+0      	; 0x1194 <main+0x5d4>
    1194:	00 00       	nop
				_delay_ms(100);
				if (PIND & 0x01){_delay_ms(100);PORTD = PinTracker;break;} 
    1196:	48 9b       	sbis	0x09, 0	; 9
    1198:	0b c0       	rjmp	.+22     	; 0x11b0 <main+0x5f0>
    119a:	8f ef       	ldi	r24, 0xFF	; 255
    119c:	90 e7       	ldi	r25, 0x70	; 112
    119e:	a2 e0       	ldi	r26, 0x02	; 2
    11a0:	81 50       	subi	r24, 0x01	; 1
    11a2:	90 40       	sbci	r25, 0x00	; 0
    11a4:	a0 40       	sbci	r26, 0x00	; 0
    11a6:	e1 f7       	brne	.-8      	; 0x11a0 <main+0x5e0>
    11a8:	00 c0       	rjmp	.+0      	; 0x11aa <main+0x5ea>
    11aa:	00 00       	nop
    11ac:	1b b9       	out	0x0b, r17	; 11
    11ae:	52 c0       	rjmp	.+164    	; 0x1254 <main+0x694>
				else if (PIND & 0x02){_delay_ms(100);PORTD = PinTracker;break;}
    11b0:	49 9b       	sbis	0x09, 1	; 9
    11b2:	0b c0       	rjmp	.+22     	; 0x11ca <main+0x60a>
    11b4:	bf ef       	ldi	r27, 0xFF	; 255
    11b6:	e0 e7       	ldi	r30, 0x70	; 112
    11b8:	f2 e0       	ldi	r31, 0x02	; 2
    11ba:	b1 50       	subi	r27, 0x01	; 1
    11bc:	e0 40       	sbci	r30, 0x00	; 0
    11be:	f0 40       	sbci	r31, 0x00	; 0
    11c0:	e1 f7       	brne	.-8      	; 0x11ba <main+0x5fa>
    11c2:	00 c0       	rjmp	.+0      	; 0x11c4 <main+0x604>
    11c4:	00 00       	nop
    11c6:	1b b9       	out	0x0b, r17	; 11
    11c8:	45 c0       	rjmp	.+138    	; 0x1254 <main+0x694>
    11ca:	2f ef       	ldi	r18, 0xFF	; 255
    11cc:	80 e7       	ldi	r24, 0x70	; 112
    11ce:	92 e0       	ldi	r25, 0x02	; 2
    11d0:	21 50       	subi	r18, 0x01	; 1
    11d2:	80 40       	sbci	r24, 0x00	; 0
    11d4:	90 40       	sbci	r25, 0x00	; 0
    11d6:	e1 f7       	brne	.-8      	; 0x11d0 <main+0x610>
    11d8:	00 c0       	rjmp	.+0      	; 0x11da <main+0x61a>
    11da:	00 00       	nop
				_delay_ms(100);
				if (PIND & 0x01){_delay_ms(100);PORTD = PinTracker;break;}
    11dc:	48 9b       	sbis	0x09, 0	; 9
    11de:	0b c0       	rjmp	.+22     	; 0x11f6 <main+0x636>
    11e0:	af ef       	ldi	r26, 0xFF	; 255
    11e2:	b0 e7       	ldi	r27, 0x70	; 112
    11e4:	e2 e0       	ldi	r30, 0x02	; 2
    11e6:	a1 50       	subi	r26, 0x01	; 1
    11e8:	b0 40       	sbci	r27, 0x00	; 0
    11ea:	e0 40       	sbci	r30, 0x00	; 0
    11ec:	e1 f7       	brne	.-8      	; 0x11e6 <main+0x626>
    11ee:	00 c0       	rjmp	.+0      	; 0x11f0 <main+0x630>
    11f0:	00 00       	nop
    11f2:	1b b9       	out	0x0b, r17	; 11
    11f4:	2f c0       	rjmp	.+94     	; 0x1254 <main+0x694>
				else if (PIND & 0x02){_delay_ms(100);PORTD = PinTracker;break;}
    11f6:	49 9b       	sbis	0x09, 1	; 9
    11f8:	0b c0       	rjmp	.+22     	; 0x1210 <main+0x650>
    11fa:	ff ef       	ldi	r31, 0xFF	; 255
    11fc:	20 e7       	ldi	r18, 0x70	; 112
    11fe:	82 e0       	ldi	r24, 0x02	; 2
    1200:	f1 50       	subi	r31, 0x01	; 1
    1202:	20 40       	sbci	r18, 0x00	; 0
    1204:	80 40       	sbci	r24, 0x00	; 0
    1206:	e1 f7       	brne	.-8      	; 0x1200 <main+0x640>
    1208:	00 c0       	rjmp	.+0      	; 0x120a <main+0x64a>
    120a:	00 00       	nop
    120c:	1b b9       	out	0x0b, r17	; 11
    120e:	22 c0       	rjmp	.+68     	; 0x1254 <main+0x694>
    1210:	9f ef       	ldi	r25, 0xFF	; 255
    1212:	a0 e7       	ldi	r26, 0x70	; 112
    1214:	b2 e0       	ldi	r27, 0x02	; 2
    1216:	91 50       	subi	r25, 0x01	; 1
    1218:	a0 40       	sbci	r26, 0x00	; 0
    121a:	b0 40       	sbci	r27, 0x00	; 0
    121c:	e1 f7       	brne	.-8      	; 0x1216 <main+0x656>
    121e:	00 c0       	rjmp	.+0      	; 0x1220 <main+0x660>
    1220:	00 00       	nop
				_delay_ms(100);
				if (PIND & 0x01){_delay_ms(100);PORTD = PinTracker;break;}
    1222:	48 9b       	sbis	0x09, 0	; 9
    1224:	0b c0       	rjmp	.+22     	; 0x123c <main+0x67c>
    1226:	ef ef       	ldi	r30, 0xFF	; 255
    1228:	f0 e7       	ldi	r31, 0x70	; 112
    122a:	22 e0       	ldi	r18, 0x02	; 2
    122c:	e1 50       	subi	r30, 0x01	; 1
    122e:	f0 40       	sbci	r31, 0x00	; 0
    1230:	20 40       	sbci	r18, 0x00	; 0
    1232:	e1 f7       	brne	.-8      	; 0x122c <main+0x66c>
    1234:	00 c0       	rjmp	.+0      	; 0x1236 <main+0x676>
    1236:	00 00       	nop
    1238:	1b b9       	out	0x0b, r17	; 11
    123a:	0c c0       	rjmp	.+24     	; 0x1254 <main+0x694>
				else if (PIND & 0x02){_delay_ms(100);PORTD = PinTracker;break;}
    123c:	49 9b       	sbis	0x09, 1	; 9
    123e:	9f cf       	rjmp	.-194    	; 0x117e <main+0x5be>
    1240:	8f ef       	ldi	r24, 0xFF	; 255
    1242:	90 e7       	ldi	r25, 0x70	; 112
    1244:	a2 e0       	ldi	r26, 0x02	; 2
    1246:	81 50       	subi	r24, 0x01	; 1
    1248:	90 40       	sbci	r25, 0x00	; 0
    124a:	a0 40       	sbci	r26, 0x00	; 0
    124c:	e1 f7       	brne	.-8      	; 0x1246 <main+0x686>
    124e:	00 c0       	rjmp	.+0      	; 0x1250 <main+0x690>
    1250:	00 00       	nop
    1252:	1b b9       	out	0x0b, r17	; 11
    1254:	bf ef       	ldi	r27, 0xFF	; 255
    1256:	e0 e7       	ldi	r30, 0x70	; 112
    1258:	f2 e0       	ldi	r31, 0x02	; 2
    125a:	b1 50       	subi	r27, 0x01	; 1
    125c:	e0 40       	sbci	r30, 0x00	; 0
    125e:	f0 40       	sbci	r31, 0x00	; 0
    1260:	e1 f7       	brne	.-8      	; 0x125a <main+0x69a>
    1262:	00 c0       	rjmp	.+0      	; 0x1264 <main+0x6a4>
    1264:	00 00       	nop
				Alarm = 0;
				}
		
		_delay_ms(100);
		alarmHours = 25; // then we say the alarm is done and it will not go off again until it is set again by the user.
		alarmMinutes = 61;
    1266:	0f 2e       	mov	r0, r31
    1268:	fd e3       	ldi	r31, 0x3D	; 61
    126a:	ef 2e       	mov	r14, r31
    126c:	f0 2d       	mov	r31, r0
				else if (PIND & 0x02){_delay_ms(100);PORTD = PinTracker;break;}
				Alarm = 0;
				}
		
		_delay_ms(100);
		alarmHours = 25; // then we say the alarm is done and it will not go off again until it is set again by the user.
    126e:	0f 2e       	mov	r0, r31
    1270:	f9 e1       	ldi	r31, 0x19	; 25
    1272:	ff 2e       	mov	r15, r31
    1274:	f0 2d       	mov	r31, r0
		alarmMinutes = 61;
	}
	nokia_lcd_render();
    1276:	0e 94 ad 02 	call	0x55a	; 0x55a <nokia_lcd_render>
	nokia_lcd_clear();
    127a:	0e 94 a9 01 	call	0x352	; 0x352 <nokia_lcd_clear>
    127e:	2f ef       	ldi	r18, 0xFF	; 255
    1280:	80 e7       	ldi	r24, 0x70	; 112
    1282:	92 e0       	ldi	r25, 0x02	; 2
    1284:	21 50       	subi	r18, 0x01	; 1
    1286:	80 40       	sbci	r24, 0x00	; 0
    1288:	90 40       	sbci	r25, 0x00	; 0
    128a:	e1 f7       	brne	.-8      	; 0x1284 <main+0x6c4>
    128c:	00 c0       	rjmp	.+0      	; 0x128e <main+0x6ce>
    128e:	00 00       	nop
    1290:	a5 cd       	rjmp	.-1206   	; 0xddc <main+0x21c>

00001292 <__udivmodqi4>:
    1292:	99 1b       	sub	r25, r25
    1294:	79 e0       	ldi	r23, 0x09	; 9
    1296:	04 c0       	rjmp	.+8      	; 0x12a0 <__udivmodqi4_ep>

00001298 <__udivmodqi4_loop>:
    1298:	99 1f       	adc	r25, r25
    129a:	96 17       	cp	r25, r22
    129c:	08 f0       	brcs	.+2      	; 0x12a0 <__udivmodqi4_ep>
    129e:	96 1b       	sub	r25, r22

000012a0 <__udivmodqi4_ep>:
    12a0:	88 1f       	adc	r24, r24
    12a2:	7a 95       	dec	r23
    12a4:	c9 f7       	brne	.-14     	; 0x1298 <__udivmodqi4_loop>
    12a6:	80 95       	com	r24
    12a8:	08 95       	ret

000012aa <__itoa_ncheck>:
    12aa:	bb 27       	eor	r27, r27
    12ac:	4a 30       	cpi	r20, 0x0A	; 10
    12ae:	31 f4       	brne	.+12     	; 0x12bc <__itoa_ncheck+0x12>
    12b0:	99 23       	and	r25, r25
    12b2:	22 f4       	brpl	.+8      	; 0x12bc <__itoa_ncheck+0x12>
    12b4:	bd e2       	ldi	r27, 0x2D	; 45
    12b6:	90 95       	com	r25
    12b8:	81 95       	neg	r24
    12ba:	9f 4f       	sbci	r25, 0xFF	; 255
    12bc:	0c 94 61 09 	jmp	0x12c2	; 0x12c2 <__utoa_common>

000012c0 <__utoa_ncheck>:
    12c0:	bb 27       	eor	r27, r27

000012c2 <__utoa_common>:
    12c2:	fb 01       	movw	r30, r22
    12c4:	55 27       	eor	r21, r21
    12c6:	aa 27       	eor	r26, r26
    12c8:	88 0f       	add	r24, r24
    12ca:	99 1f       	adc	r25, r25
    12cc:	aa 1f       	adc	r26, r26
    12ce:	a4 17       	cp	r26, r20
    12d0:	10 f0       	brcs	.+4      	; 0x12d6 <__utoa_common+0x14>
    12d2:	a4 1b       	sub	r26, r20
    12d4:	83 95       	inc	r24
    12d6:	50 51       	subi	r21, 0x10	; 16
    12d8:	b9 f7       	brne	.-18     	; 0x12c8 <__utoa_common+0x6>
    12da:	a0 5d       	subi	r26, 0xD0	; 208
    12dc:	aa 33       	cpi	r26, 0x3A	; 58
    12de:	08 f0       	brcs	.+2      	; 0x12e2 <__utoa_common+0x20>
    12e0:	a9 5d       	subi	r26, 0xD9	; 217
    12e2:	a1 93       	st	Z+, r26
    12e4:	00 97       	sbiw	r24, 0x00	; 0
    12e6:	79 f7       	brne	.-34     	; 0x12c6 <__utoa_common+0x4>
    12e8:	b1 11       	cpse	r27, r1
    12ea:	b1 93       	st	Z+, r27
    12ec:	11 92       	st	Z+, r1
    12ee:	cb 01       	movw	r24, r22
    12f0:	0c 94 7a 09 	jmp	0x12f4	; 0x12f4 <strrev>

000012f4 <strrev>:
    12f4:	dc 01       	movw	r26, r24
    12f6:	fc 01       	movw	r30, r24
    12f8:	67 2f       	mov	r22, r23
    12fa:	71 91       	ld	r23, Z+
    12fc:	77 23       	and	r23, r23
    12fe:	e1 f7       	brne	.-8      	; 0x12f8 <strrev+0x4>
    1300:	32 97       	sbiw	r30, 0x02	; 2
    1302:	04 c0       	rjmp	.+8      	; 0x130c <strrev+0x18>
    1304:	7c 91       	ld	r23, X
    1306:	6d 93       	st	X+, r22
    1308:	70 83       	st	Z, r23
    130a:	62 91       	ld	r22, -Z
    130c:	ae 17       	cp	r26, r30
    130e:	bf 07       	cpc	r27, r31
    1310:	c8 f3       	brcs	.-14     	; 0x1304 <strrev+0x10>
    1312:	08 95       	ret

00001314 <_exit>:
    1314:	f8 94       	cli

00001316 <__stop_program>:
    1316:	ff cf       	rjmp	.-2      	; 0x1316 <__stop_program>
